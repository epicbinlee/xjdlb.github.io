<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[如何在next配置站内的搜索引擎？]]></title>
    <url>%2F2018%2F04%2F03%2F%E5%A6%82%E4%BD%95%E5%9C%A8next%E9%85%8D%E7%BD%AE%E7%AB%99%E5%86%85%E7%9A%84%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[本文介绍如何在next配置站内的搜索引擎。 配置过程 安装hexo-generator-searchdb插件，以管理员身份打开cmd进入项目目录下，运行 1npm install hexo-generator-searchdb --save 在站点的-config.yml文件中增加 12345search: path: search.xml field: post format: html limit: 10000 配置theme/next/-config.yml文件 12345678910111213141516171819# Algolia Searchalgolia_search: enable: false hits: per_page: 10 labels: input_placeholder: Search for Posts hits_empty: "We didn't find any results for the search: $&#123;query&#125;" hits_stats: "$&#123;hits&#125; results found in $&#123;time&#125; ms"## Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>列表</tag>
        <tag>配置</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux shell入门练习]]></title>
    <url>%2F2018%2F04%2F03%2Flinux%20shell%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[本文介绍linux shell的入门程序，后期会陆续更新。 基本程序实例 计算文件夹下的文件数量 12345678910#!/bin/bashecho "this is a shell print file's number in the local dir."ls &gt; filename.logy=1for i in $( cat filename.log ) do echo "the file number is $y" y=$(( $y + 1 )) donerm -rf filename.log 简单求和程序 12345678#!/bin/bash# author: leebins=0for(( i=1; i&lt;=100; i=i+1 )) do s=$(( $s+$i )) doneecho "the sum of 1+2+3+...+100 is $s" 使用数组 12345#!/bin/bashfor x in morning noon afternoon evening do echo "This time is $x" done 使用函数 1234567#!/bin/bashfunction func1()&#123; echo AAA&#125;func1echo this is the end of the loopecho Now this is the end of the script 判断 1234567#!/bin/bashif [ -d /etc/mysql ] then echo "the path is right!!" else echo "the path is not right"fi 判断硬盘是否已经满了 123456789#!/bin/bash# Author: LeeBinrate=$( df | grep "sda" | awk '&#123;print $5&#125;'| cut -d "%" -f 1 )if [ $rate -ge 80 ] then echo "Warning! /dev/sda1 is full!!" else echo "/dev/sda1 is not full!!"fi until循环 12345678910#!/bin/bash# Author:LeeBini=1s=0until [ $i -gt 100 ] do s=$(( $s+$i )) i=$(( $i+1 )) doneecho "the sum is $s" while循环 12345678910111213#!/bin/bashfunction func1()&#123; echo this is an example of a function&#125;count=1while [ $count -le 5 ]do func1 count=$[ $count+1 ]doneecho end of loopfunc1echo end of script while循环求和 1234567891011#!/bin/bash# Author:LeeBini=1s=0#while [ $i -le 100 ] do s=$(( $s+$i )) i=$(( $i+1 )) doneecho "the sum is $s" 备份脚本 123456789101112131415#!/bin/sh# auto mail for system info# time/bin/date +%F &gt;&gt; ~/app/shell/sysinfoecho &gt;&gt; ~/app/shell/sysinfo# disk infoecho "disk info:" &gt;&gt; ~/app/shell/sysinfo/bin/df -h &gt;&gt; ~/app/shell/sysinfoecho &gt;&gt; ~/app/shell/sysinfoecho "online users" &gt;&gt; ~/app/shell/sysinfo/usr/bin/who | /bin/grep -v root &gt;&gt; ~/app/shell/sysinfoecho &gt;&gt; ~/app/shell/sysinfoecho "memory info:" &gt;&gt; ~/app/shell/sysinfo/usr/bin/free -m &gt;&gt; ~/app/shell/sysinfoecho &gt;&gt; ~/app/shell/sysinfo case语句 12345678910111213141516#!/bin/bash# author: leebinread -p "Please choose yes/no: " -t 30 cho#case $cho in "yes") echo "Your choose is yes!!" ;; "no") echo "Your choose is no!!" ;; *) echo "Your choose is error!!" ;;esac# 批量解压缩 1234567891011#!/bin/bash# author: leebincd /lampls *.tar.gz &gt; ls.log#for i in $( cat ls.log ) do tar -zxvf $i &amp;&gt; /dev/null done#rm -rf /lamp/ls.log]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>列表</tag>
        <tag>shell</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何将hexo的git pages项目部署vps？]]></title>
    <url>%2F2018%2F03%2F29%2F%E5%A6%82%E4%BD%95%E5%B0%86hexo%E7%9A%84git%20pages%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2vps%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[本文介绍如何在vps上搭建自己的blog。 环境 digitalocean上ubuntu的vps一台 window10+nodejs+hexo软件环境，参考hexo搭建博客 思路 方案一 vps上使用本地模式搭建hexo博客，使用Nginx将域名指向 http://localhost:4000 方案二 在客户端写blog，git推送到服务端，服务端用Nginx解析网页文件 过程 下文分为众多的详细步骤 安装git和nginx 安装软件git和nginx123apt-get updateapt-get install gitapt-get install nginx 配置git用户和仓库 git用户权限设定（可以不需要） 12345chmod 740 /etc/sudoersvim /etc/sudoers#在root ALL=(ALL:ALL) ALL下面新增一行git ALL=(ALL:ALL) ALLchmod 440 /etc/sudoers 配置git用户和仓库, 参考在vps上构建私有git服务器 配置git hooks 在hexo.git/hooks/目录下修改post-update.sample为post-update，并覆盖加入 12345678#!/bin/bashGIT_REPO=/home/git/hexo.gitTMP_GIT_CLONE=/tmp/hexoPUBLIC_WWW=/var/www/hexorm -rf $&#123;TMP_GIT_CLONE&#125;git clone $GIT_REPO $TMP_GIT_CLONErm -rf $&#123;PUBLIC_WWW&#125;/*cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125; 保证post-update有执行权限 1chmod +x post-receive nginx配置 新建站点文件夹 1234mkdir -p /var/www/blogchmod -R 775 /var/www/blogchown -R git /var/www/blogchgrp -R git /var/www/blog 配nginx的站点文件2处 12345678910111213141516171819202122232425262728293031323334#配置1vim /etc/nginx/conf.d/hexo.confserver &#123; listen 80 ; listen [::]:80; root /var/www/blog; server_name clearsky.me www.clearsky.me; #server_ip access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ &#123; root /var/www/blog; access_log off; expires 1d; &#125; location ~* ^.+\.(css|js|txt|xml|swf|wav)$ &#123; root /var/www/blog; access_log off; expires 10m; &#125; location / &#123; root /var/www/blog; if (-f $request_filename) &#123; rewrite ^/(.*)$ /$1 break; &#125; &#125; location /nginx_status &#123; stub_status on; access_log off; &#125;&#125;#配置2vim /etc/nginx/sites-available/defaultroot /var/www/html; 重启nginx服务器 1234service nginx restart#或者/etc/init.d/nginx stop/etc/init.d/nginx start 后续 修改本地的blog源文件，配置推送git服务器，推送到vps服务器上 参考git pages多服务器部署]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>列表</tag>
        <tag>git</tag>
        <tag>配置</tag>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git pages的迁移和多服务器部署]]></title>
    <url>%2F2018%2F03%2F29%2Fgit%20pages%E7%9A%84%E8%BF%81%E7%A7%BB%E5%92%8C%E5%A4%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[本文介绍如何将github上的项目迁移到gitee上，如何实现源文件多服务器的部署。 github pages迁移到gitee服务器上 在gitee上新建一个和gitee用户名一样的git仓库，并且在pages标签开启pages服务 克隆github pages仓库到本地，安装必要的插件，保证github pages能够与github服务器正常上传部署 更改github仓库/.git/config文件 12345678910111213[core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true[remote "origin"] url = git@github.com:xjdlb/xjdlb.github.io.git fetch = +refs/heads/*:refs/remotes/origin/*[branch "master"] remote = origin merge = refs/heads/master 更改url为gitee仓库的url 更改github仓库/-config.yml文件 12345deploy: type: git repo: gitee: git@gitee.com:bin_lee/bin_lee.git branch: master 更改repo为gitee仓库的url 然后使用下面的脚本提交、推送、发布到gitee仓库，迁移就成功了1234567891011121314151617181920echo "hello"yy=$(date +%y)mm=$(date +%m)dd=$(date +%d)HH=$(date +%H)MM=$(date +%M)SS=$(date +%S)xW=$(date +%U)we=$(date +%a)xD=$(date +%j)git statusgit add .git commit -m "$yy/$mm/$dd-$HH:$MM:$SS 把github服务器上的pages迁移到gitee上"echo "=================================="git push git@gitee.com:bin_lee/bin_lee.git hexogit log --oneline | headecho "=================================="hexo clean &amp;&amp; hexo g -d 迁移完成，实现多服务器部署 更改github仓库/.git/config文件，改为主要的服务器地址 12345678910111213[core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true[remote "origin"] url = git@github.com:xjdlb/xjdlb.github.io.git fetch = +refs/heads/*:refs/remotes/origin/*[branch "master"] remote = origin merge = refs/heads/master 更改url为gitee仓库的url 更改github仓库/-config.yml文件 123456deploy: type: git repo: github: git@github.com:xjdlb/xjdlb.github.io.git gitee: git@gitee.com:bin_lee/bin_lee.git branch: master 更改repo为gitee仓库的url 然后使用下面的脚本提交、推送、发布到gitee仓库和github仓库，多服务器部署就成功了12345678910111213141516171819202122echo "hello"yy=$(date +%y)mm=$(date +%m)dd=$(date +%d)HH=$(date +%H)MM=$(date +%M)SS=$(date +%S)xW=$(date +%U)we=$(date +%a)xD=$(date +%j)git statusgit add .git commit -m "$yy/$mm/$dd-$HH:$MM:$SS 同时部署到两个服务器上测试"git push git@github.com:xjdlb/xjdlb.github.io.git hexogit log --oneline | headecho "=================================="git push git@gitee.com:bin_lee/bin_lee.git hexogit log --oneline | headecho "=================================="hexo clean &amp;&amp; hexo g -d]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>列表</tag>
        <tag>git</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何将hexo源文件整合到部署的git中？]]></title>
    <url>%2F2018%2F03%2F28%2F%E5%A6%82%E4%BD%95%E5%B0%86hexo%E6%BA%90%E6%96%87%E4%BB%B6%E6%95%B4%E5%90%88%E5%88%B0%E9%83%A8%E7%BD%B2%E7%9A%84git%E4%B8%AD%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[本文介绍如何将hexo源文件整合到部署的git中，实现不携带源文件也能写博客，其中，发布和部署实现了自动化脚本操作。 先决条件 已经使用了hexo部署了自己的blog 源文件没有丢失 克隆 在github上克隆部署后的文件到本地客户端 使用git bash here进入git仓库 新建hexo分支并转换到hexo分支1git checkout -b hexo 拷贝 git仓库转换到hexo分支 将源文件blog文件夹下的所有文件拷贝到上述git仓库中 创建自动化脚本 在git仓库的根目录下创建脚本 脚本1 create_new_page.sh 1234567891011121314151617181920212223echo "hello"yy=$(date +%Y)mm=$(date +%m)dd=$(date +%d)HH=$(date +%H)MM=$(date +%M)SS=$(date +%S)filename="11111"filepostfix=".md"cd source/_poststouch $filename$filepostfixecho &gt; $filename$filepostfixecho "---" &gt;&gt; $filename$filepostfixecho "title: $filename" &gt;&gt; $filename$filepostfixecho "date: $yy-$mm-$dd $HH:$MM:$SS" &gt;&gt; $filename$filepostfixecho "tags: [列表,2222,3333,4444]" &gt;&gt; $filename$filepostfixecho "categories: 5555" &gt;&gt; $filename$filepostfixecho "toc: true" &gt;&gt; $filename$filepostfixecho "mathjax: true" &gt;&gt; $filename$filepostfixecho "---" &gt;&gt; $filename$filepostfixecho "" &gt;&gt; $filename$filepostfixecho "&lt;!-- more --&gt;" &gt;&gt; $filename$filepostfixcd ../.. 文本1 commit.txt 12345678910111213141516171819echo "hello"yy=$(date +%y)mm=$(date +%m)dd=$(date +%d)HH=$(date +%H)MM=$(date +%M)SS=$(date +%S)xW=$(date +%U)we=$(date +%a)xD=$(date +%j)git statusgit add .git commit -m "$yy/$mm/$dd-$HH:$MM:$SS 新增了列表标签"git push origin hexogit log --oneline | headecho "=================================="hexo clean &amp;&amp; hexo g -d 脚本2 upload_and_deploy.sh 12ehco "push and deploy..."sh commit.txt 本次修改完成直接在commit.txt中修改commit，然后运行upload_and_deploy.sh，即可上传代码到hexo分支，发布blog到master分支 换个地点继续写作 先决条件：电脑+网络+nodejs+hexo 克隆仓库到本地 在仓库中建立hexo配置脚本 init_hexo_after_clone.sh1234git checkout hexonpm install hexonpm installnpm install hexo-deployer-git]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>列表</tag>
        <tag>git</tag>
        <tag>配置</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo部署在github和gitee上的坑]]></title>
    <url>%2F2018%2F03%2F28%2Fhexo%E9%83%A8%E7%BD%B2%E5%9C%A8github%E5%92%8Cgitee%E4%B8%8A%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[本文介绍了hexo博客github和gitee上部署时候遇到的坑。 遇到的坑列举如下 gitee不支持个性化的域名绑定，所以不要试图申请阿里云的域名，将域名指向gitee pages。 github pages支持个性化域名的绑定，需要在blog/source目录下新建CNAME文件，并写入自己域名。]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>列表</tag>
        <tag>github</tag>
        <tag>hexo</tag>
        <tag>gitee</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo的主题相关的配置]]></title>
    <url>%2F2018%2F03%2F27%2Fhexo%E7%9A%84%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[本文将逐渐介绍blog和themes相关的配置方法. 导航上的首页、标签、分类、关于等配置 保留blog下的配置文件中的首页、标签、分类、关于的目录正确 在theme下配置文件打开menu相关的导航 博文前面文件为： 123456title: 使用github pages和hexo搭建自己的博客date: 2018-03-27 13:56:08tags: [githubpages,hexo,配置]categories: 配置toc: truemathjax: true 或者 12345678title: 如何利用ubuntu云服务器实现私有git服务端-附ssh常见操作？date: 2018-03-27 18:37:32tags: - git - 配置categories: 配置toc: truemathjax: true]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>列表</tag>
        <tag>配置</tag>
        <tag>hexo</tag>
        <tag>githubpages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用github pages和hexo搭建自己的博客]]></title>
    <url>%2F2018%2F03%2F27%2F%E4%BD%BF%E7%94%A8github%20pages%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[本文描述了如何使用github pages和hexo搭建自己的博客。 安装node.js node.js下载地址 下载node.js，并安装 安装git并配置ssh密钥 在客户端下载git下载地址 安装git 在客户端右键打开git bash here 设置user.name和user.email 12git config --global user.name "你的GitHub用户名"git config --global user.email "你的GitHub注册邮箱" 生成ssh密钥 1ssh-keygen -t rsa -C "你的GitHub注册邮箱" 显示密钥 1cat ~/.ssh/id_rsa.pub 添加密钥到github服务器中密钥管理添加地址 安装hexo 安装hexo、安装扩展插件1234567891011121314151617# 安装hexonpm install hexo-cli g# 初始化博客文件夹hexo init blog# 切换到该路径cd blog# 安装hexo的扩展插件npm install# 安装其它插件npm install hexo-server --savenpm install hexo-admin --savenpm install hexo-generator-archive --savenpm install hexo-generator-feed --savenpm install hexo-generator-search --savenpm install hexo-generator-tag --savenpm install hexo-deployer-git --savenpm install hexo-generator-sitemap --save 本地开发blog与本地测试 添加自己的markdown到 blog/source/posts目录下 生成静态页面并开启服务器 123456# 生成静态页面hexo generate# 开启本地服务器hexo s# 或者hexo s -p 指定的port 打开浏览器，地址栏中输入：http://localhost:4000/ 服务端新建自己的博客仓库 在 https://github.com/new 中新建自己的仓库 其中Repository name要和Owner是一致的 客户端将hexo博客部署到github上 修改配置文件blog/config.yml，修改deploy项的内容 123456789# Deployment 注释## Docs: https://hexo.io/docs/deployment.htmldeploy: # 类型 type: git # 仓库 repo: git@github.com:xjdlb/xjdlb.github.io.git # 分支 branch: master 注意：type: git中的冒号后面由空格 注意：将xjdlb换成自己的用户名 客户端将自己的blog部署hexo 将自己的项目部署到github pages中 123456# 清空静态页面hexo clean# 生成静态页面hexo generate# 部署hexo deploy 打开网页，输入 http://github_username.github.io 打开github上托管的博客 如我的博客地址是：http://xjdlb.github.io hexo命令缩写与组合 含义 1234hexo g：hexo generatehexo c：hexo cleanhexo s：hexo serverhexo d：hexo deploy 组合 1234# 清除、生成、启动hexo clean &amp;&amp; hexo g -s# 清除、生成、部署hexo clean &amp;&amp; hexo g -d 主题相关配置 在hexo themes中下载相关的主题 下载方法在blog目录中克隆 1git clone https://github.com/iissnan/hexo-theme-next themes/next 在blog/config.yml中配置主题 1theme: next 新建blog文件 hexo new “Hexo教程” 添加标题及其分类信息 123456title: Hello Worlddate: 2016-01-15 20:19:32tags: [SayHi]categories: SayHitoc: truemathjax: true 或者 在blog目录下可以写成脚本 1234567891011121314151617181920yy=$(date +%Y)mm=$(date +%m)dd=$(date +%d)HH=$(date +%H)MM=$(date +%M)SS=$(date +%S)filename="11111"filepostfix=".md"cd source/_poststouch $filename$filepostfixecho &gt; $filename$filepostfixecho "---" &gt;&gt; $filename$filepostfixecho "title: $filename" &gt;&gt; $filename$filepostfixecho "date: $yy-$mm-$dd $HH:$MM:$SS" &gt;&gt; $filename$filepostfixecho "tags: [2222,3333,4444]" &gt;&gt; $filename$filepostfixecho "categories: 5555" &gt;&gt; $filename$filepostfixecho "toc: true" &gt;&gt; $filename$filepostfixecho "mathjax: true" &gt;&gt; $filename$filepostfixecho "---" &gt;&gt; $filename$filepostfixcd ../.. 将github pages绑定自己的域名 在阿里云控制台找到域名管理 在阿里云上购买自己的域名注册地址 在xjdlb/xjdlb.github.io/settings中Custom domain处添加自己的域名，不要http://和www ping https://xjdlb.github.io/ 查看github pages的ip 添加解析 记录类型 主机记录 解析线路 记录值 TTL值 A @ 默认 151.101.41.147 600 A www 默认 151.101.41.147 600 使用自己的域名测试 CNAME问题问题：每次hexo deploy之后，https://www.leebin.top 都会出现404错误一般解决：Github pages–&gt;Settings–&gt;Custom domain最优解决：在将CNAME文件放在source目录下，CNAME文件内容为：leebin.top]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>列表</tag>
        <tag>github</tag>
        <tag>pages</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何利用ubuntu实现私有git服务端-附ssh操作？]]></title>
    <url>%2F2018%2F03%2F27%2F%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8ubuntu%E5%AE%9E%E7%8E%B0%E7%A7%81%E6%9C%89git%E6%9C%8D%E5%8A%A1%E7%AB%AF-%E9%99%84ssh%E6%93%8D%E4%BD%9C%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[本文介绍如何利用云服务器实现私有git服务端，包含了git新建仓库、本地与服务器的ssh互连、保留gitlog迁移git的方法、以及创建仓库的自动化脚本。 在服务端下载git 下载安装git12apt-get updateapt-get install git -y 配置git用户 添加git用户12useradd gitpasswd git 通过ssh客户端和服务器互连 客户端生成ssh密钥 1234git config --global user.name "你的GitHub用户名"git config --global user.email "你的GitHub注册邮箱"ssh-keygen -t rsa -C "你的GitHub注册邮箱"cat ~/.ssh/id_rsa.pub 或者 上述操作可以集成为无交互的脚本在本地直接执行即可 1234567891011121314151617y=$(date +%y)m=$(date +%m)d=$(date +%d)H=$(date +%H)M=$(date +%M)S=$(date +%S)path=$(pwd)cd ~git config --global user.name "bin_lee"git config --global user.email "xjd.binlee@qq.com"#cd ~/.sshtar -zcvf ssh_binlee_backup_$y-$m-$d-$H-$M-$S.tar.gz .sshrm -rfd ~/.ssh# ssh-keygen -t rsa -C "xjd.binlee@qq.com"ssh-keygen -t rsa -P "" -C "xjd.binlee@qq.com" -f ~/.ssh/id_rsacat ~/.ssh/id_rsa.pubcd $path 服务端安装ssh并实现xshell连接 123456789101112#安装sudo apt-get install openssh-server -ysudo ps -e |grep sshsudo service ssh startsudo passwd rootsudo vi /etc/ssh/sshd_configPermitRootLogin prohibit-passwordPermitRootLogin yessudo service ssh restart#在服务器的指定用户目录下mkdir -p /root/.sshtouch authorized_keys 将上述生成的密钥文件添加到服务端 1echo "密钥" &gt;&gt; /root/.ssh/authorized_keys 客户端测试连通性 123ssh -T git@gitee.com或者ssh -T git@server_ip 新建git仓库并使用 新建git仓库 12mkdir -p /srv/git/repos/xxx.gitcd /srv/git/repos 初始化git仓库 1git init --bare /srv/git/repos/xxx.git 设置git仓库的访问权限 1234cd /srv/git/reposchmod -R 775 xxx.gitchown -R git xxx.gitchgrp -R git xxx.git 克隆git仓库并测试 1git clone git@server_ip:/srv/git/repos/xxx.git 大招 将上述操作合并为git脚本12345678910111213141516171819202122232425262728293031323334353637383940414243apt-get updateecho "----------------------------------------"echo "&gt;&gt;&gt; update finished..."echo "----------------------------------------"apt-get install git -yecho "----------------------------------------"echo "&gt;&gt;&gt; install finished..."echo "----------------------------------------"#useradd git#passwd git#or#openssl passwd -stdinuseradd -p "8iENHwQTXrdZM" git#change passwdtouch chpass.txtecho "git:hest" &gt;&gt; chpass.txtchpasswd &lt; chpass.txtrm -rf chpass.txtecho "----------------------------------------"echo "&gt;&gt;&gt; useradd and reset passwd finished..."echo "----------------------------------------"key="ssh-rsa AAA......."mkdir -p /home/git/.sshtouch /home/git/.ssh/authorized_keys#vim /home/git/.ssh/authorized_keysecho "$&#123;key&#125;" &gt;&gt; /home/git/.ssh/authorized_keyscat /home/git/.ssh/authorized_keysecho "----------------------------------------"echo "&gt;&gt;&gt; add authorized_keys finished..."echo "----------------------------------------"respos_path="/srv/git/respos/"project_name="test.git"project_path=$&#123;respos_path&#125;$&#123;project_name&#125;mkdir -p $&#123;project_path&#125;git init --bare $&#123;project_path&#125;chmod -R 775 $&#123;project_path&#125;chown -R git $&#123;project_path&#125;chgrp -R git $&#123;project_path&#125;echo "----------------------------------------"echo "init git respos finished..."my_ip=$(/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '&#123;print $2&#125;'|tr -d "addr:")echo "git clone git@$&#123;my_ip&#125;:$&#123;project_path&#125;"echo "----------------------------------------" 如果出错销毁服务端git12userdel -r gitrm -rdf /srv/git/ 如果服务器出现问题，保留gitlog迁移git的方法1234567891011#在源服务器上裸克隆git clone --bare git://github.com/username/project.gitcd project.git#镜像上传到新的服务器上git push --mirror git@gitcafe.com/username/newproject.gitcd ..rm -rf project.git#克隆新服务器下的工程到客户端git clone git@gitcafe.com/username/newproject.git#设置新的上传url为新服务器的地址git remote set-url origin remote_git_address]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>列表</tag>
        <tag>git</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何利用VPS搭建自己的ss服务器？]]></title>
    <url>%2F2018%2F03%2F27%2F%E6%90%AD%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[本文描述了如何在ubuntu服务器上快速搭建自己的shadowcoks代理服务器。 以详细步骤安装配置启动过程1.安装ss123apt-get updatesudo apt-get install python-pip -ysudo pip install shadowsocks 2.配置[shell]1234567891011121314mkdir /etc/shadowsockstouch /etc/shadowsocks/ss_config.jsonvim /etc/shadowsocks/ss_config.json&#123; "server": "165.227.213.57", "port_password": &#123; "10001": "112345678a!", "10002": "112345678a!", "10003": "112345678a!" &#125;, "local_port": 1080, "timeout": 600, "method": "aes-256-cfb"&#125; 1234567891011121314mkdir /etc/shadowsockstouch /etc/shadowsocks/ss_config.jsonvim /etc/shadowsocks/ss_config.json&#123; "server": "165.227.213.57", "port_password": &#123; "10001": "112345678a!", "10002": "112345678a!", "10003": "112345678a!" &#125;, "local_port": 1080, "timeout": 600, "method": "aes-256-cfb"&#125; 3.启动12345678910111213141516cd ~touch start.shchmod 775 start.shvim start.shssserver -c /etc/shadowsocks/ss_config.json -d startssserver -c /etc/shadowsocks/ss_config_multiple.json -d startnetstat -ntlp | grep pythontouch stop.shchmod 775 stop.shvim stop.shssserver -c /etc/shadowsocks/ss_config.json -d stopssserver -c /etc/shadowsocks/ss_config_multiple.json -d stopnetstat -ntlp | grep python 用脚本实现一键安装1.创建配置启动脚本12345678910111213141516171819202122232425262728293031323334353637创建x脚本touch x &amp;&amp; chmod 775 x &amp;&amp; vim x直接复制到x脚本里面cd ~ &amp;&amp; touch ss_cfg.jsonip="162.243.161.150"echo "&#123;" &gt;&gt; ss_cfg.jsonecho "\"server\": \"$&#123;ip&#125;\"," &gt;&gt; ss_cfg.jsonecho "\"port_password\": &#123;" &gt;&gt; ss_cfg.jsonecho "\"10001\": \"helloworld\"," &gt;&gt; ss_cfg.jsonecho "\"10002\": \"helloworld\"," &gt;&gt; ss_cfg.jsonecho "\"10003\": \"helloworld\"" &gt;&gt; ss_cfg.jsonecho "&#125;," &gt;&gt; ss_cfg.jsonecho "\"local_port\": 1080," &gt;&gt; ss_cfg.jsonecho "\"timeout\": 600," &gt;&gt; ss_cfg.jsonecho "\"method\": \"aes-256-cfb\"" &gt;&gt; ss_cfg.jsonecho "&#125;" &gt;&gt; ss_cfg.jsoncd ~touch sta.sh &amp;&amp; chmod 775 sta.shecho "ssserver -c ~/ss_cfg.json -d start" &gt;&gt; ~/sta.shecho "netstat -ntlp | grep python" &gt;&gt; ~/sta.shtouch sto.sh &amp;&amp; chmod 775 sto.shecho "ssserver -c ~/ss_cfg.json -d stop" &gt;&gt; ~/sto.shecho "netstat -ntlp | grep python" &gt;&gt; ~/sto.shecho "-------------report-------------------"echo "the fie list as follows:"lsecho "-------------start ss-----------------"./sta.shecho "-------------your ss config-----------"echo "ip=$&#123;ip&#125;"echo "port=10001, password=helloworld"echo "port=10002, password=helloworld"echo "port=10003, password=helloworld"echo "local_port=1080"echo "timeout=600"echo "method=aes-256-cfb"echo "-------------end---------------------" 2.启动服务12345678运行x脚本./x启动服务./sta.sh关闭服务./sto.sh删除文件rm -rf x ss_cfg.json sta.sh sto.sh &amp;&amp; touch x &amp;&amp; chmod 775 x &amp;&amp; vim x]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>列表</tag>
        <tag>配置</tag>
        <tag>ss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>SayHi</category>
      </categories>
      <tags>
        <tag>列表</tag>
        <tag>SayHi</tag>
      </tags>
  </entry>
</search>
