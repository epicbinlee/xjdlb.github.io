<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>初心</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-18T05:01:33.619Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LeeBin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop wordcount程序开发</title>
    <link href="http://yoursite.com/2018/04/17/Hadoop%E4%B8%ADwordcount%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2018/04/17/Hadoop中wordcount程序开发/</id>
    <published>2018-04-17T09:17:34.000Z</published>
    <updated>2018-04-18T05:01:33.619Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何利用java和Hadoop组件开发wordcount程序。</p><a id="more"></a><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>windows</li><li>eclipse</li><li>maven</li></ul><ol><li>Apache Hadoop Common 3.1</li><li>Apache Hadoop Client Aggregator 3.1</li><li>Hadoop Core 1.2</li><li>Apache Hadoop HDFS 3.1</li><li>Apache Hadoop MapReduce Core 3.1</li></ol><h2 id="添加依赖后maven报错"><a href="#添加依赖后maven报错" class="headerlink" title="添加依赖后maven报错"></a>添加依赖后maven报错</h2><ul><li>报错<pre><code>Buiding Hadoop with Eclipse Maven - Missing artifact jdk.tools:jdk.tools:jar:1.6</code></pre></li><li>解决<pre><code># cmdC:\Users\BinLee&gt;java -versionjava version &quot;1.8.0_144&quot;Java(TM) SE Runtime Environment (build 1.8.0_144-b01)Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)## 添加下面的依赖到maven的pom.xml&lt;dependency&gt;  &lt;groupId&gt;jdk.tools&lt;/groupId&gt;  &lt;artifactId&gt;jdk.tools&lt;/artifactId&gt;  &lt;version&gt;1.8.0_144&lt;/version&gt;  &lt;scope&gt;system&lt;/scope&gt;  &lt;systemPath&gt;${JAVA_HOME}/lib/tools.jar&lt;/systemPath&gt;&lt;/dependency&gt;</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何利用java和Hadoop组件开发wordcount程序。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>常见的环境变量配置</title>
    <link href="http://yoursite.com/2018/04/17/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/04/17/常见的环境变量配置/</id>
    <published>2018-04-17T03:49:36.000Z</published>
    <updated>2018-04-17T04:12:21.604Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍常见的环境变量配置方法。</p><a id="more"></a><h2 id="windows常见的环境变量配置"><a href="#windows常见的环境变量配置" class="headerlink" title="windows常见的环境变量配置"></a>windows常见的环境变量配置</h2><ul><li><p>CLASSPATH</p><pre><code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code></pre></li><li><p>JAVA_HOME</p><pre><code>C:\app3\Java\jdk1.8.0_144</code></pre></li><li><p>JRE_HOME</p><pre><code>C:\app3\Java\jre1.8.0_144</code></pre></li><li><p>MVN_HOME<br>C:\app3\apache-maven-3.5.3</p></li><li><p>Path</p><pre><code>C:\app3\Python35\Scripts\;C:\app3\Python35\;C:\ProgramData\Oracle\Java\javapath;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;%JAVA_HOME%\bin;%JRE_HOME%\bin;C:\app3\Git\cmd;C:\app3\MinGW\bin;C:\app3\nodejs\;C:\app3\MATLAB\R2017b\runtime\win64;C:\app3\MATLAB\R2017b\bin;%MVN_HOME%\bin;</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍常见的环境变量配置方法。&lt;/p&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="windows" scheme="http://yoursite.com/tags/windows/"/>
    
      <category term="环境变量" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>apache maven的配置与使用</title>
    <link href="http://yoursite.com/2018/04/17/maven%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/17/maven的配置与使用/</id>
    <published>2018-04-17T03:49:36.000Z</published>
    <updated>2018-04-17T08:20:16.124Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了apache maven的配置与使用过程，【清理项目】→【编译项目】→【测试项目】→【生成测试报告】→【打包项目】→【部署项目】。</p><a id="more"></a><h2 id="需要先配置java和maven环境变量"><a href="#需要先配置java和maven环境变量" class="headerlink" title="需要先配置java和maven环境变量"></a>需要先配置java和maven环境变量</h2><ul><li><p>CLASSPATH</p><pre><code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code></pre></li><li><p>JAVA_HOME</p><pre><code>C:\app3\Java\jdk1.8.0_144</code></pre></li><li><p>JRE_HOME</p><pre><code>C:\app3\Java\jre1.8.0_144</code></pre></li><li><p>MVN_HOME<br>C:\app3\apache-maven-3.5.3</p></li><li><p>Path</p><pre><code>C:\app3\Python35\Scripts\;C:\app3\Python35\;C:\ProgramData\Oracle\Java\javapath;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;%JAVA_HOME%\bin;%JRE_HOME%\bin;C:\app3\Git\cmd;C:\app3\MinGW\bin;C:\app3\nodejs\;C:\app3\MATLAB\R2017b\runtime\win64;C:\app3\MATLAB\R2017b\bin;%MVN_HOME%\bin;</code></pre></li></ul><h2 id="更换maven的仓库为自定义的仓库"><a href="#更换maven的仓库为自定义的仓库" class="headerlink" title="更换maven的仓库为自定义的仓库"></a>更换maven的仓库为自定义的仓库</h2><ul><li>创建目标位置如，d:\maven\repo</li><li>拷贝C:\app3\apache-maven-3.5.3\conf\settings.xml文件到d:\maven</li><li>修改两处的settings.xml文件</li><li>定位到localRepository<pre><code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;# 修改为：&lt;localRepository&gt;d:\maven\repo&lt;/localRepository&gt;</code></pre></li></ul><h2 id="maven手动创建项目"><a href="#maven手动创建项目" class="headerlink" title="maven手动创建项目"></a>maven手动创建项目</h2><ul><li><p><a href="https://www.cnblogs.com/yjmyzz/p/3495762.html" target="_blank" rel="noopener">他山之石</a></p></li><li><p>创建项目</p><pre><code># cmdcd /d d:\testmvn archetype:generate# logChoose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 1169:（和eclipse上的maven插件有关系，直接回车）Choose org.apache.maven.archetypes:maven-archetype-quickstart version:1: 1.0-alpha-12: 1.0-alpha-23: 1.0-alpha-34: 1.0-alpha-45: 1.06: 1.17: 1.3Choose a number: 7:(直接回车)Define value for property &#39;groupId&#39;: com.hikvision.ai_data.data（从大往小填写自己公司的名字）Define value for property &#39;artifactId&#39;: test_mvn（项目的名字）Define value for property &#39;version&#39; 1.0-SNAPSHOT: :（默认就行）Define value for property &#39;package&#39; com.hikvision.ai_data.data: : test_mvn_pkg（将class打包的jar文件的名称）Confirm properties configuration:groupId: com.hikvision.ai_data.dataartifactId: test_mvnversion: 1.0-SNAPSHOTpackage: test_mvn_pkgY: :(直接回车)[INFO] ----------------------------------------------------------------------------[INFO] Using following parameters for creating project from Archetype: maven-archetype-quickstart:1.3[INFO] ----------------------------------------------------------------------------[INFO] Parameter: groupId, Value: com.hikvision.ai_data.data[INFO] Parameter: artifactId, Value: test_mvn[INFO] Parameter: version, Value: 1.0-SNAPSHOT[INFO] Parameter: package, Value: test_mvn_pkg[INFO] Parameter: packageInPathFormat, Value: test_mvn_pkg[INFO] Parameter: package, Value: test_mvn_pkg[INFO] Parameter: version, Value: 1.0-SNAPSHOT[INFO] Parameter: groupId, Value: com.hikvision.ai_data.data[INFO] Parameter: artifactId, Value: test_mvn[INFO] Project created from Archetype in dir: D:\003---WorkSpace\06---testmaven\test_mvn[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 13:57 min[INFO] Finished at: 2018-04-17T14:54:37+08:00[INFO] ------------------------------------------------------------------------[0m[0m</code></pre></li><li><p>创建项目后查看文件</p><pre><code>D:\003---WorkSpace\06---testmaven&gt;tree卷 工厂 的文件夹 PATH 列表卷序列号为 0000006C BAA7:827CD:.└─test_mvn  └─src      ├─main      │  └─java      │      └─test_mvn_pkg      └─test          └─java              └─test_mvn_pkg</code></pre></li><li><p>编译项目</p><pre><code># cmdcd test_mvnmvn clean compile# logD:\003---WorkSpace\06---testmaven\test_mvn&gt;mvn clean compile[INFO] Scanning for projects...[INFO][INFO] ----------------&lt; com.hikvision.ai_data.data:test_mvn &gt;-----------------[INFO] Building test_mvn 1.0-SNAPSHOT[INFO] --------------------------------[ jar ]---------------------------------[INFO][INFO] --- maven-clean-plugin:3.0.0:clean (default-clean) @ test_mvn ---[INFO][INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ test_mvn ---[INFO] Using &#39;UTF-8&#39; encoding to copy filtered resources.[INFO] skip non existing resourceDirectory D:\003---WorkSpace\06---testmaven\test_mvn\src\main\resources[INFO][INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ test_mvn ---[INFO] Changes detected - recompiling the module![INFO] Compiling 1 source file to D:\003---WorkSpace\06---testmaven\test_mvn\target\classes[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 1.570 s[INFO] Finished at: 2018-04-17T14:58:59+08:00[INFO] ------------------------------------------------------------------------</code></pre></li><li><p>单元测试</p><pre><code># cmdmvn clean test# logD:\003---WorkSpace\06---testmaven\test_mvn&gt;mvn clean test[INFO] Scanning for projects...[INFO][INFO] ----------------&lt; com.hikvision.ai_data.data:test_mvn &gt;-----------------[INFO] Building test_mvn 1.0-SNAPSHOT[INFO] --------------------------------[ jar ]---------------------------------[INFO][INFO] --- maven-clean-plugin:3.0.0:clean (default-clean) @ test_mvn ---[INFO] Deleting D:\003---WorkSpace\06---testmaven\test_mvn\target[INFO][INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ test_mvn ---[INFO] Using &#39;UTF-8&#39; encoding to copy filtered resources.[INFO] skip non existing resourceDirectory D:\003---WorkSpace\06---testmaven\test_mvn\src\main\resources[INFO][INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ test_mvn ---[INFO] Changes detected - recompiling the module![INFO] Compiling 1 source file to D:\003---WorkSpace\06---testmaven\test_mvn\target\classes[INFO][INFO] --- maven-resources-plugin:3.0.2:testResources (default-testResources) @ test_mvn ---[INFO] Using &#39;UTF-8&#39; encoding to copy filtered resources.[INFO] skip non existing resourceDirectory D:\003---WorkSpace\06---testmaven\test_mvn\src\test\resources[INFO][INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ test_mvn ---[INFO] Changes detected - recompiling the module![INFO] Compiling 1 source file to D:\003---WorkSpace\06---testmaven\test_mvn\target\test-classes[INFO][INFO] --- maven-surefire-plugin:2.20.1:test (default-test) @ test_mvn ---[INFO][INFO] -------------------------------------------------------[INFO]  T E S T S[INFO] -------------------------------------------------------[INFO] Running test_mvn_pkg.AppTest[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.057 s - in test_mvn_pkg.AppTest[INFO][INFO] Results:[INFO][INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0[INFO][INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 3.227 s[INFO] Finished at: 2018-04-17T15:00:33+08:00[INFO] ------------------------------------------------------------------------</code></pre></li><li><p>打包项目</p><pre><code># cmdmvn clean package# logD:\003---WorkSpace\06---testmaven\test_mvn&gt;mvn clean package[INFO] Scanning for projects...[INFO][INFO] ----------------&lt; com.hikvision.ai_data.data:test_mvn &gt;-----------------[INFO] Building test_mvn 1.0-SNAPSHOT[INFO] --------------------------------[ jar ]---------------------------------[INFO][INFO] --- maven-clean-plugin:3.0.0:clean (default-clean) @ test_mvn ---[INFO] Deleting D:\003---WorkSpace\06---testmaven\test_mvn\target[INFO][INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ test_mvn ---[INFO] Using &#39;UTF-8&#39; encoding to copy filtered resources.[INFO] skip non existing resourceDirectory D:\003---WorkSpace\06---testmaven\test_mvn\src\main\resources[INFO][INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ test_mvn ---[INFO] Changes detected - recompiling the module![INFO] Compiling 1 source file to D:\003---WorkSpace\06---testmaven\test_mvn\target\classes[INFO][INFO] --- maven-resources-plugin:3.0.2:testResources (default-testResources) @ test_mvn ---[INFO] Using &#39;UTF-8&#39; encoding to copy filtered resources.[INFO] skip non existing resourceDirectory D:\003---WorkSpace\06---testmaven\test_mvn\src\test\resources[INFO][INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ test_mvn ---[INFO] Changes detected - recompiling the module![INFO] Compiling 1 source file to D:\003---WorkSpace\06---testmaven\test_mvn\target\test-classes[INFO][INFO] --- maven-surefire-plugin:2.20.1:test (default-test) @ test_mvn ---[INFO][INFO] -------------------------------------------------------[INFO]  T E S T S[INFO] -------------------------------------------------------[INFO] Running test_mvn_pkg.AppTest[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.052 s - in test_mvn_pkg.AppTest[INFO][INFO] Results:[INFO][INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0[INFO][INFO][INFO] --- maven-jar-plugin:3.0.2:jar (default-jar) @ test_mvn ---[INFO] Building jar: D:\003---WorkSpace\06---testmaven\test_mvn\target\test_mvn-1.0-SNAPSHOT.jar[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 3.599 s[INFO] Finished at: 2018-04-17T15:02:35+08:00[INFO] ------------------------------------------------------------------------</code></pre></li><li><p>运行项目</p><pre><code># cmd# 1.无参数，类在target下面test_mvn\target\classes\test_mvn_pkg\App.classmvn exec:java -Dexec.mainClass=&quot;com.vineetmanohar.module.Main&quot;# 即mvn exec:java -Dexec.mainClass=&quot;test_mvn_pkg.App&quot;## 2.有参数mvn exec:java -Dexec.mainClass=&quot;com.vineetmanohar.module.Main&quot; -Dexec.args=&quot;arg0 arg1 arg2&quot;## 3.指定对classpath的运行时依赖mvn exec:java -Dexec.mainClass=&quot;com.vineetmanohar.module.Main&quot; -Dexec.classpathScope=runtime## logD:\003---WorkSpace\06---testmaven\test_mvn&gt;mvn exec:java -Dexec.mainClass=&quot;test_mvn_pkg.App&quot;[INFO] Scanning for projects...[INFO][INFO] ----------------&lt; com.hikvision.ai_data.data:test_mvn &gt;-----------------[INFO] Building test_mvn 1.0-SNAPSHOT[INFO] --------------------------------[ jar ]---------------------------------[INFO][INFO] --- exec-maven-plugin:1.6.0:java (default-cli) @ test_mvn ---Hello World![INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 1.010 s[INFO] Finished at: 2018-04-17T15:09:49+08:00[INFO] ------------------------------------------------------------------------</code></pre></li><li><p>项目部署</p><pre><code># 前提是jboss web server已经成功启动# cmdmvn clean jboss-as:deploy</code></pre></li></ul><h2 id="eclipse上的maven项目"><a href="#eclipse上的maven项目" class="headerlink" title="eclipse上的maven项目"></a>eclipse上的maven项目</h2><ul><li>创建 New-&gt;Other…-&gt;Maven-&gt;Maven Project</li><li>use default workspace location</li><li>archetypes maven-archetype-quickstart</li><li>new maven project<pre><code>com.hikvision.big_data.datatest_eclipse_maven0.0.1-SNAPSHOTcom.hikvision.big_data.data.test_eclipse_maven</code></pre></li><li><p>其中pom.xml</p><pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;com.hikvision.big_data.data&lt;/groupId&gt;&lt;artifactId&gt;test_eclipse_maven&lt;/artifactId&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;packaging&gt;jar&lt;/packaging&gt;&lt;name&gt;test_eclipse_maven&lt;/name&gt;&lt;url&gt;http://maven.apache.org&lt;/url&gt;&lt;properties&gt;  &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&lt;/properties&gt;&lt;dependencies&gt;  &lt;dependency&gt;    &lt;groupId&gt;junit&lt;/groupId&gt;    &lt;artifactId&gt;junit&lt;/artifactId&gt;    &lt;version&gt;3.8.1&lt;/version&gt;    &lt;scope&gt;test&lt;/scope&gt;  &lt;/dependency&gt;&lt;/dependencies&gt;&lt;/project&gt;</code></pre></li><li><p>在网站上找到自己需要的依赖 <a href="http://mvnrepository.com/" target="_blank" rel="noopener">http://mvnrepository.com/</a></p><pre><code># 比如：我需要找到time相关的操作，直接mavenrepository中搜索time， 得到的Joda Time# 再用google搜索Joda Time，查看其用法# mavenrepository中的Joda Time依赖添加到pom.xml&lt;!-- https://mvnrepository.com/artifact/org.webjars.npm/d3-array --&gt;&lt;!-- https://mvnrepository.com/artifact/joda-time/joda-time --&gt;&lt;dependency&gt;  &lt;groupId&gt;joda-time&lt;/groupId&gt;  &lt;artifactId&gt;joda-time&lt;/artifactId&gt;  &lt;version&gt;2.9.9&lt;/version&gt;&lt;/dependency&gt;# 保存自动下载# 使用everything搜索Joda Time发现已经在C:\Users\BinLee\.m2\repository\joda-time\joda-time\2.9.9\joda-time-2.9.9.jar下面</code></pre></li><li>使用依赖<pre><code># 在窗口上project explorer&gt;maven dependencies查看需要的依赖类# 在需要地方直接插入# codepackage com.hikvision.big_data.data.test_eclipse_maven;import org.joda.time.DateTime;import org.joda.time.Days;import org.joda.time.LocalDateTime;/*** Hello world!**/public class App {  public static void main(String[] args) {      System.out.println(&quot;Hello World!&quot;);      DateTime now = DateTime.now();      System.out.println(now);      Days maxValue = Days.MAX_VALUE;      System.out.println(maxValue);      System.out.println(LocalDateTime.now());  }}# outputHello World!2018-04-17T16:15:02.211+08:00P2147483647D2018-04-17T16:15:02.289</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了apache maven的配置与使用过程，【清理项目】→【编译项目】→【测试项目】→【生成测试报告】→【打包项目】→【部署项目】。&lt;/p&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="windows" scheme="http://yoursite.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>eclipse中的git基本配置</title>
    <link href="http://yoursite.com/2018/04/16/eclipse%E4%B8%AD%E7%9A%84git%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/04/16/eclipse中的git基本配置/</id>
    <published>2018-04-16T10:56:26.000Z</published>
    <updated>2018-04-17T08:50:07.094Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何使用git和eclipse进行代码的版本控制。<br><a id="more"></a></p><h2 id="命令行模式操作"><a href="#命令行模式操作" class="headerlink" title="命令行模式操作"></a>命令行模式操作</h2><ul><li>服务端注册github或者giteee账号</li><li>客户端下载git软件</li><li>使用命令生成本地的密钥</li><li>将秘钥添加到服务端的git中</li><li>服务端新建git仓库，客户端克隆到本地</li><li>客户端添加文件到仓库中，使用各种命令对该仓库进行版本控制</li><li>上述的属于git的基本操作详细步骤参考 <a href="https://leebin.top/2018/03/27/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8ubuntu%E5%AE%9E%E7%8E%B0%E7%A7%81%E6%9C%89git%E6%9C%8D%E5%8A%A1%E7%AB%AF-%E9%99%84ssh%E6%93%8D%E4%BD%9C%EF%BC%9F/" target="_blank" rel="noopener">如何利用ubuntu实现私有git服务端-附ssh操作？</a></li></ul><h2 id="eclipse中git上传代码"><a href="#eclipse中git上传代码" class="headerlink" title="eclipse中git上传代码"></a>eclipse中git上传代码</h2><ul><li>服务端已经添加了客户端的ssh密钥</li><li>服务端已经新建了仓库</li><li>客户端eclipse新建项目</li><li>在路径eclipse&gt;windows&gt;preference&gt;team&gt;git&gt;configuration下查看user和passwd的配置</li><li>在路径package explorer&gt;项目右键&gt;share project&gt;repository&gt;create，新建本地的仓库名字要和服务端的名字一致，如：d:\test.git，完成了新建仓库</li><li>在路径package explorer&gt;项目右键&gt;team&gt;add to index，完成文件的add</li><li>在路径package explorer&gt;项目右键&gt;team&gt;commit或者Ctrl+#，提交</li><li>接上一步，先填写commit message</li><li>接上一步，填写服务器地址<pre><code>remote name: originurl: git@github.com:xjdlb/testgit.git # git 地址hostname: github.com # 域名repository path: xjdlb/testgit.git</code></pre></li><li>一路next就好了</li><li><a href="https://blog.csdn.net/u014079773/article/details/51595127" target="_blank" rel="noopener">他山之石</a></li></ul><h2 id="eclipse中git下载代码"><a href="#eclipse中git下载代码" class="headerlink" title="eclipse中git下载代码"></a>eclipse中git下载代码</h2><ul><li>在路径package explorer&gt;空白右键&gt;import&gt;Git&gt;Projects from Git，next</li><li>接上步，选择URI，包含了远程和本地</li><li>主要的分支</li><li>新建本地的仓库，如：d:\test.git</li><li>继续coding</li><li>返回上面上传代码操作</li></ul><h2 id="eclipse-push-出现了-rejected-non-fast-forward错误"><a href="#eclipse-push-出现了-rejected-non-fast-forward错误" class="headerlink" title="eclipse push 出现了 rejected-non-fast-forward错误"></a>eclipse push 出现了 rejected-non-fast-forward错误</h2><ul><li><a href="https://blog.csdn.net/chenshun123/article/details/46756087" target="_blank" rel="noopener">他山之石</a></li><li>打开windows&gt;show view&gt;other&gt;git repositories</li><li>git repositories&gt;remote&gt;origin&gt;绿色分支&gt;右键&gt;configure fetch&gt;save and fetch</li><li>此时可以看见remote tracking&gt;origin/mater&gt;右键&gt;merge</li><li>问题解决，可以上传了</li><li>add&gt;commit&gt;push</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了如何使用git和eclipse进行代码的版本控制。&lt;br&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="eclipse" scheme="http://yoursite.com/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>使用kcptun加速ss服务</title>
    <link href="http://yoursite.com/2018/04/15/%E4%BD%BF%E7%94%A8kcptun%E5%8A%A0%E9%80%9Fss%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/04/15/使用kcptun加速ss服务/</id>
    <published>2018-04-15T15:55:21.000Z</published>
    <updated>2018-04-16T02:23:39.920Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何使用kcptun加速ss服务。<br><a id="more"></a></p><h2 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h2><ul><li>安装组件<pre><code>apt-get updateapt-get upgradeapt-get install build-essential python-pip m2crypto supervisor</code></pre></li><li>安装ss<pre><code>pip install shadowsocks</code></pre></li><li>安装加密用软件 libsodium<pre><code>wget https://github.com/jedisct1/libsodium/releases/download/1.0.11/libsodium-1.0.11.tar.gztar zxvf libsodium-1.0.11.tar.gzcd libsodium-1.0.11./configuremake &amp;&amp; make checkmake installecho /usr/local/lib &gt; /etc/ld.so.conf.d/usr_local_lib.confldconfig</code></pre></li><li><p>[可选] 配置supervisor, vi /etc/supervisor/conf.d/shadowsocks.conf</p><pre><code>[program:shadowsocks]command=ssserver -c /etc/shadowsocks.jsonautorestart=trueuser=root</code></pre></li><li><p>[可选] 使用supervisor</p><pre><code>supervisorctl reloadsupervisorctl status</code></pre></li></ul><h2 id="ss配置"><a href="#ss配置" class="headerlink" title="ss配置"></a>ss配置</h2><ul><li>ss服务器配置ss_config.json<pre><code>{&quot;server&quot;: &quot;127.0.0.1&quot;,&quot;port_password&quot;: {&quot;10001&quot;: &quot;helloworld&quot;,&quot;10002&quot;: &quot;helloworld&quot;,&quot;10003&quot;: &quot;helloworld&quot;},&quot;local_port&quot;: 1080,&quot;timeout&quot;: 600,&quot;method&quot;: &quot;chacha20&quot;,&quot;auth&quot;: true}</code></pre></li><li>启动和停止脚本<pre><code>ssserver -c /root/shadowsocks/ss_config.json -d startssserver -c /root/shadowsocks/ss_config.json -d stop</code></pre></li></ul><h2 id="kcptun配置"><a href="#kcptun配置" class="headerlink" title="kcptun配置"></a>kcptun配置</h2><ul><li>kcptun官网 <a href="https://github.com/xtaci/kcptun/releases" target="_blank" rel="noopener">https://github.com/xtaci/kcptun/releases</a></li><li>其中 kcptun-linux-amd64-20180316.tar.gz 为Linux版本</li><li>其中 kcptun-windows-amd64-20180316.tar.gz 为Windows版本</li><li>安装 kcptun<pre><code>mkdir /root/kcptuncd /root/kcptunln -sf /bin/bash /bin/shwget https://github.com/xtaci/kcptun/releases/download/v20161118/kcptun-linux-amd64-20161118.tar.gztar -zxf kcptun-linux-amd64-*.tar.gz</code></pre></li><li>配置三个脚本start.sh, stop.sh, server-config.json</li></ul><ol><li><p>启动脚本vi /root/kcptun/start.sh</p><pre><code>#!/bin/bashcd /root/kcptun/./server_linux_amd64 -c /root/kcptun/server-config.json &gt; kcptun.log 2&gt;&amp;1 &amp;echo &quot;Kcptun started.&quot;</code></pre></li><li><p>停止脚本 vi /root/kcptun/stop.sh</p><pre><code>#!/bin/bashecho &quot;Stopping Kcptun...&quot;PID=`ps -ef | grep server_linux_amd64 | grep -v grep | awk &#39;{print $2}&#39;`if [ &quot;&quot; !=  &quot;$PID&quot; ]; thenecho &quot;killing $PID&quot;kill -9 $PIDfiecho &quot;Kcptun stoped.&quot;</code></pre></li><li><p>kcptun配置文件 vi /root/kcptun/server-config.json</p><pre><code>{&quot;listen&quot;: &quot;:443&quot;,&quot;target&quot;: &quot;127.0.0.1:10001&quot;,&quot;key&quot;: &quot;helloworld&quot;,&quot;crypt&quot;: &quot;salsa20&quot;,&quot;mode&quot;: &quot;fast2&quot;,&quot;mtu&quot;: 1350,&quot;sndwnd&quot;: 1024,&quot;rcvwnd&quot;: 1024,&quot;datashard&quot;: 5,&quot;parityshard&quot;: 5,&quot;dscp&quot;: 46,&quot;nocomp&quot;: true,&quot;acknodelay&quot;: false,&quot;nodelay&quot;: 0,&quot;interval&quot;: 40,&quot;resend&quot;: 0,&quot;nc&quot;: 0,&quot;sockbuf&quot;: 4194304,&quot;keepalive&quot;: 10}</code></pre></li></ol><ul><li>启动或停止kcptun<pre><code>sh /root/kcptun/start.shsh /root/kcptun/stop.sh</code></pre></li></ul><hr><h2 id="客户端windows环境中的kcptun配置"><a href="#客户端windows环境中的kcptun配置" class="headerlink" title="客户端windows环境中的kcptun配置"></a>客户端windows环境中的kcptun配置</h2><ul><li>kcptun官网 <a href="https://github.com/xtaci/kcptun/releases" target="_blank" rel="noopener">https://github.com/xtaci/kcptun/releases</a></li><li>client_windows_amd64.exe 放在全部英文目录下</li><li>创建下面的三个文件：run.vbs, client-config.json, stop.sh</li></ul><ol><li>在当前文件夹下，创建 run.vbs<pre><code>Dim RunKcptunSet fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)Set WshShell = WScript.CreateObject(&quot;WScript.Shell&quot;)currentPath = fso.GetFile(Wscript.ScriptFullName).ParentFolder.Path &amp; &quot;\&quot;configFile = currentPath &amp; &quot;client-config.json&quot;logFile = currentPath &amp; &quot;kcptun.log&quot;exeConfig = currentPath &amp; &quot;client_windows_amd64.exe -c &quot; &amp; configFilecmdLine = &quot;cmd /c &quot; &amp; exeConfig &amp; &quot; &gt; &quot; &amp; logFile &amp; &quot; 2&gt;&amp;1&quot;WshShell.Run cmdLine, 0, False&#39;WScript.Sleep 1000&#39;Wscript.echo cmdLineSet WshShell = NothingSet fso = NothingWScript.quit</code></pre></li><li>在当前文件夹下，创建client-config.json<pre><code>{&quot;localaddr&quot;: &quot;:12345&quot;,&quot;remoteaddr&quot;: &quot;165.227.213.57:443&quot;,&quot;key&quot;: &quot;helloworld&quot;,&quot;crypt&quot;: &quot;salsa20&quot;,&quot;mode&quot;: &quot;fast2&quot;,&quot;conn&quot;: 1,&quot;autoexpire&quot;: 60,&quot;mtu&quot;: 1350,&quot;sndwnd&quot;: 128,&quot;rcvwnd&quot;: 1024,&quot;datashard&quot;: 5,&quot;parityshard&quot;: 5,&quot;dscp&quot;: 46,&quot;nocomp&quot;: true,&quot;acknodelay&quot;: false,&quot;nodelay&quot;: 0,&quot;interval&quot;: 40,&quot;resend&quot;: 0,&quot;nc&quot;: 0,&quot;sockbuf&quot;: 4194304,&quot;keepalive&quot;: 10}</code></pre></li><li>在当前文件夹下，创建stop.sh<pre><code>taskkill /f /im client_windows_amd64.exe</code></pre></li></ol><h2 id="客户端windows环境中的ss配置"><a href="#客户端windows环境中的ss配置" class="headerlink" title="客户端windows环境中的ss配置"></a>客户端windows环境中的ss配置</h2><ul><li>使用本地的配置<pre><code>127.0.0.112345helloworld(服务端ss的密码，不是kcptun的密码)chacha20</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何使用kcptun加速ss服务。&lt;br&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="kcptun" scheme="http://yoursite.com/tags/kcptun/"/>
    
      <category term="ss" scheme="http://yoursite.com/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>如何去掉valine的Powered By信息？</title>
    <link href="http://yoursite.com/2018/04/03/%E5%A6%82%E4%BD%95%E5%8E%BB%E6%8E%89valine%E7%9A%84Powered%20By%E4%BF%A1%E6%81%AF%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/04/03/如何去掉valine的Powered By信息？/</id>
    <published>2018-04-03T14:42:05.000Z</published>
    <updated>2018-04-03T22:57:22.570Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何去掉valine页面上的Powered By信息。<br><a id="more"></a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>找到配置文件<pre><code>blog/themes/next/layout/_third-party/comments/valine.swig</code></pre></li><li>配置如下<pre><code>{% if theme.valine.enable and theme.valine.appid and theme.valine.appkey %}  <script src="//cdn1.lncld.net/static/js/3.0.4/av-min.js"></script>  <script src="//unpkg.com/valine/dist/Valine.min.js"></script>  <script type="text/javascript">    var GUEST = ['nick','mail','link'];    var guest = '{{ theme.valine.guest_info }}';    guest = guest.split(',').filter(item=>{      return GUEST.indexOf(item)>-1;    });    new Valine({        el: '#comments' ,        verify: {{ theme.valine.verify }},        notify: {{ theme.valine.notify }},        appId: '{{ theme.valine.appid }}',        appKey: '{{ theme.valine.appkey }}',        placeholder: '{{ theme.valine.placeholder }}',        avatar:'{{ theme.valine.avatar }}',        guest_info:guest,        pageSize:'{{ theme.valine.pageSize }}' || 10,    });//新增以下代码即可，可以移除.info下所有子节点。var infoEle = document.querySelector('#comments .info');if (infoEle && infoEle.childNodes && infoEle.childNodes.length > 0){  infoEle.childNodes.forEach(function(item) {item.parentNode.removeChild(item);  });}  </script>{% endif %}</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何去掉valine页面上的Powered By信息。&lt;br&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="valine" scheme="http://yoursite.com/tags/valine/"/>
    
  </entry>
  
  <entry>
    <title>hexo如何开启语法高亮？</title>
    <link href="http://yoursite.com/2018/04/03/hexo%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/04/03/hexo如何开启语法高亮？/</id>
    <published>2018-04-03T14:42:05.000Z</published>
    <updated>2018-04-03T17:24:54.773Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍hexo有关语法高亮的配置方案。<br><a id="more"></a></p><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><ul><li>配置主站点下的配置文件<pre><code>highlight:enable: trueline_number: trueauto_detect: truetab_replace:</code></pre></li><li>代码后面添加名称，如```java code ```</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍hexo有关语法高亮的配置方案。&lt;br&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>LC_001_TwoSum_HashMap</title>
    <link href="http://yoursite.com/2018/04/03/LC_001_TwoSum_HashMap/"/>
    <id>http://yoursite.com/2018/04/03/LC_001_TwoSum_HashMap/</id>
    <published>2018-04-03T14:42:05.000Z</published>
    <updated>2018-04-03T23:53:13.212Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode第001题，主要用到了hashmap数据结构。<br><a id="more"></a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><pre><code class="java">package LC;import java.util.Arrays;import java.util.HashMap;/** * https://leetcode.com/problems/two-sum/description/ * Given an array of integers, * return indices of the two numbers such that they add up to a specific target. * You may assume that each input would have exactly one solution, * and you may not use the same element twice. * Example: * Given nums = [2, 7, 11, 15], target = 9, * Because nums[0] + nums[1] = 2 + 7 = 9, * return [0, 1]. */public class LC_001_TwoSum_HashMap {    public static void main(String[] args) {        int[] a = {1, 2, 3, 4, 5, 7};        int t = 10;        System.out.println(Arrays.toString(twoSum(a, t)));    }    private static int[] twoSum(int[] nums, int target) {        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();        for (int i = 0; i &lt; nums.length; i++) {            int diff = target - nums[i];            if (map.containsKey(diff)) return new int[]{map.get(diff), i};            map.put(nums[i], i);        }        throw new IllegalArgumentException(&quot;-1&quot;);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leetcode第001题，主要用到了hashmap数据结构。&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="basic algorithm" scheme="http://yoursite.com/tags/basic-algorithm/"/>
    
  </entry>
  
  <entry>
    <title>如何在next配置站内的搜索引擎？</title>
    <link href="http://yoursite.com/2018/04/03/%E5%A6%82%E4%BD%95%E5%9C%A8next%E9%85%8D%E7%BD%AE%E7%AB%99%E5%86%85%E7%9A%84%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/04/03/如何在next配置站内的搜索引擎？/</id>
    <published>2018-04-03T07:13:52.000Z</published>
    <updated>2018-04-03T15:04:30.578Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何在next配置站内的搜索引擎。<br><a id="more"></a></p><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><ul><li>安装hexo-generator-searchdb插件，以管理员身份打开cmd进入项目目录下，运行<pre><code>npm install hexo-generator-searchdb --save</code></pre></li><li>在站点的-config.yml文件中增加<pre><code>search:path: search.xmlfield: postformat: htmllimit: 10000</code></pre></li><li>配置theme/next/-config.yml文件<pre><code># Algolia Searchalgolia_search:enable: falsehits:  per_page: 10labels:  input_placeholder: Search for Posts  hits_empty: &quot;We didn&#39;t find any results for the search: ${query}&quot;  hits_stats: &quot;${hits} results found in ${time} ms&quot;## Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search:enable: true# if auto, trigger search by changing input# if manual, trigger search by pressing enter key or search buttontrigger: auto# show top n results per article, show all results by setting to -1top_n_per_article: 1</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何在next配置站内的搜索引擎。&lt;br&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>linux shell入门练习</title>
    <link href="http://yoursite.com/2018/04/03/linux%20shell%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/04/03/linux shell入门练习/</id>
    <published>2018-04-03T01:45:24.000Z</published>
    <updated>2018-04-03T15:49:31.412Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍linux shell的入门程序，后期会陆续更新。<br><a id="more"></a></p><h2 id="基本程序实例"><a href="#基本程序实例" class="headerlink" title="基本程序实例"></a>基本程序实例</h2><ul><li><p>计算文件夹下的文件数量</p><pre><code class="bash">#!/bin/bashecho &quot;this is a shell print file&#39;s number in the local dir.&quot;ls &gt; filename.logy=1for i in $( cat filename.log )  do      echo &quot;the file number is $y&quot;      y=$(( $y + 1 ))  donerm -rf filename.log</code></pre></li><li><p>简单求和程序</p><pre><code class="bash">#!/bin/bash# author: leebins=0for(( i=1; i&lt;=100; i=i+1 ))  do      s=$(( $s+$i ))  doneecho &quot;the sum of 1+2+3+...+100 is $s&quot;</code></pre></li><li><p>使用数组</p><pre><code class="bash">#!/bin/bashfor x in morning noon afternoon evening  do      echo &quot;This time is $x&quot;  done</code></pre></li><li><p>使用函数</p><pre><code class="bash">#!/bin/bashfunction func1(){  echo AAA}func1echo this is the end of the loopecho Now this is the end of the script</code></pre></li><li><p>判断</p><pre><code class="bash">#!/bin/bashif [ -d /etc/mysql ]  then      echo &quot;the path is right!!&quot;  else      echo &quot;the path is not right&quot;fi</code></pre></li><li><p>判断硬盘是否已经满了</p><pre><code class="bash">#!/bin/bash# Author: LeeBinrate=$( df | grep &quot;sda&quot; | awk &#39;{print $5}&#39;| cut -d &quot;%&quot; -f 1 )if [ $rate -ge 80 ]  then      echo &quot;Warning! /dev/sda1 is full!!&quot;  else      echo &quot;/dev/sda1 is not full!!&quot;fi</code></pre></li><li><p>until循环</p><pre><code class="bash">#!/bin/bash# Author:LeeBini=1s=0until [ $i -gt 100 ]  do      s=$(( $s+$i ))      i=$(( $i+1 ))  doneecho &quot;the sum is $s&quot;</code></pre></li><li><p>while循环</p><pre><code class="bash">#!/bin/bashfunction func1(){    echo this is an example of a function}count=1while [ $count -le 5 ]do  func1  count=$[ $count+1 ]doneecho end of loopfunc1echo end of script</code></pre></li><li><p>while循环求和</p><pre><code class="bash">#!/bin/bash# Author:LeeBini=1s=0#while [ $i -le 100 ]  do      s=$(( $s+$i ))      i=$(( $i+1 ))  doneecho &quot;the sum is $s&quot;</code></pre></li><li><p>备份脚本</p><pre><code class="bash">#!/bin/sh# auto mail for system info# time/bin/date +%F &gt;&gt; ~/app/shell/sysinfoecho &gt;&gt; ~/app/shell/sysinfo# disk infoecho &quot;disk info:&quot; &gt;&gt; ~/app/shell/sysinfo/bin/df -h &gt;&gt; ~/app/shell/sysinfoecho &gt;&gt; ~/app/shell/sysinfoecho &quot;online users&quot; &gt;&gt; ~/app/shell/sysinfo/usr/bin/who | /bin/grep -v root &gt;&gt; ~/app/shell/sysinfoecho &gt;&gt; ~/app/shell/sysinfoecho &quot;memory info:&quot; &gt;&gt; ~/app/shell/sysinfo/usr/bin/free -m &gt;&gt; ~/app/shell/sysinfoecho &gt;&gt; ~/app/shell/sysinfo</code></pre></li><li><p>case语句</p><pre><code class="bash">#!/bin/bash# author: leebinread -p &quot;Please choose yes/no: &quot; -t 30 cho#case $cho in  &quot;yes&quot;)      echo &quot;Your choose is yes!!&quot;      ;;  &quot;no&quot;)      echo &quot;Your choose is no!!&quot;      ;;  *)      echo &quot;Your choose is error!!&quot;      ;;esac#</code></pre></li><li><p>批量解压缩</p><pre><code class="bash">#!/bin/bash# author: leebincd /lampls *.tar.gz &gt; ls.log#for i in $( cat ls.log )  do      tar -zxvf $i &amp;&gt; /dev/null  done#rm -rf /lamp/ls.log</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍linux shell的入门程序，后期会陆续更新。&lt;br&gt;
    
    </summary>
    
      <category term="shell" scheme="http://yoursite.com/categories/shell/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>如何将hexo的git pages项目部署vps？</title>
    <link href="http://yoursite.com/2018/03/29/%E5%A6%82%E4%BD%95%E5%B0%86hexo%E7%9A%84git%20pages%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2vps%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/03/29/如何将hexo的git pages项目部署vps？/</id>
    <published>2018-03-29T05:56:11.000Z</published>
    <updated>2018-04-03T15:43:57.538Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何在vps上搭建自己的blog。<br><a id="more"></a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>digitalocean上ubuntu的vps一台</li><li>window10+nodejs+hexo软件环境，参考<a href="https://leebin.top/2018/03/27/%E4%BD%BF%E7%94%A8github%20pages%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">hexo搭建博客</a></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>方案一 vps上使用本地模式搭建hexo博客，使用Nginx将域名指向 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></li><li>方案二 在客户端写blog，git推送到服务端，服务端用Nginx解析网页文件</li></ul><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ul><li>下文分为众多的详细步骤</li></ul><h3 id="安装git和nginx"><a href="#安装git和nginx" class="headerlink" title="安装git和nginx"></a>安装git和nginx</h3><ul><li>安装软件git和nginx<pre><code>apt-get updateapt-get install gitapt-get install nginx</code></pre></li></ul><h3 id="配置git用户和仓库"><a href="#配置git用户和仓库" class="headerlink" title="配置git用户和仓库"></a>配置git用户和仓库</h3><ul><li>git用户权限设定（可以不需要）<pre><code class="bash">chmod 740 /etc/sudoersvim /etc/sudoers#在root ALL=(ALL:ALL) ALL下面新增一行git ALL=(ALL:ALL) ALLchmod 440 /etc/sudoers</code></pre></li><li>配置git用户和仓库, 参考<a href="https://leebin.top/2018/03/27/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8ubuntu%E5%AE%9E%E7%8E%B0%E7%A7%81%E6%9C%89git%E6%9C%8D%E5%8A%A1%E7%AB%AF-%E9%99%84ssh%E6%93%8D%E4%BD%9C%EF%BC%9F/" target="_blank" rel="noopener">在vps上构建私有git服务器</a></li></ul><h3 id="配置git-hooks"><a href="#配置git-hooks" class="headerlink" title="配置git hooks"></a>配置git hooks</h3><ul><li>在hexo.git/hooks/目录下修改post-update.sample为post-update，并覆盖加入<pre><code class="bash">#!/bin/bashGIT_REPO=/home/git/hexo.gitTMP_GIT_CLONE=/tmp/hexoPUBLIC_WWW=/var/www/hexorm -rf ${TMP_GIT_CLONE}git clone $GIT_REPO $TMP_GIT_CLONErm -rf ${PUBLIC_WWW}/*cp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW}</code></pre></li><li>保证post-update有执行权限<pre><code class="bash">chmod +x post-receive</code></pre></li></ul><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><ul><li>新建站点文件夹<pre><code class="bash">mkdir -p /var/www/blogchmod -R 775 /var/www/blogchown -R git /var/www/blogchgrp -R git /var/www/blog</code></pre></li><li>配nginx的站点文件2处<pre><code class="bash">#配置1vim /etc/nginx/conf.d/hexo.confserver {  listen  80 ;  listen [::]:80;  root /var/www/blog;  server_name clearsky.me www.clearsky.me; #server_ip  access_log  /var/log/nginx/hexo_access.log;  error_log   /var/log/nginx/hexo_error.log;  error_page 404 =  /404.html;  location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ {      root /var/www/blog;      access_log   off;      expires      1d;  }  location ~* ^.+\.(css|js|txt|xml|swf|wav)$ {      root /var/www/blog;      access_log   off;      expires      10m;  }  location / {      root /var/www/blog;      if (-f $request_filename) {          rewrite ^/(.*)$  /$1 break;      }  }  location /nginx_status {      stub_status on;      access_log off;  }}#配置2vim /etc/nginx/sites-available/defaultroot /var/www/html;</code></pre></li><li>重启nginx服务器<pre><code>service nginx restart#或者/etc/init.d/nginx stop/etc/init.d/nginx start</code></pre><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2></li><li>修改本地的blog源文件，配置推送git服务器，推送到vps服务器上</li><li>参考<a href="https://leebin.top/2018/03/29/git%20pages%E7%9A%84%E8%BF%81%E7%A7%BB%E5%92%8C%E5%A4%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/" target="_blank" rel="noopener">git pages多服务器部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何在vps上搭建自己的blog。&lt;br&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="vps" scheme="http://yoursite.com/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title>git pages的迁移和多服务器部署</title>
    <link href="http://yoursite.com/2018/03/29/git%20pages%E7%9A%84%E8%BF%81%E7%A7%BB%E5%92%8C%E5%A4%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/03/29/git pages的迁移和多服务器部署/</id>
    <published>2018-03-29T01:34:52.000Z</published>
    <updated>2018-04-03T15:48:23.581Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何将github上的项目迁移到gitee上，如何实现源文件多服务器的部署。<br><a id="more"></a></p><h2 id="github-pages迁移到gitee服务器上"><a href="#github-pages迁移到gitee服务器上" class="headerlink" title="github pages迁移到gitee服务器上"></a>github pages迁移到gitee服务器上</h2><ul><li>在gitee上新建一个和gitee用户名一样的git仓库，并且在pages标签开启pages服务</li><li>克隆github pages仓库到本地，安装必要的插件，保证github pages能够与github服务器正常上传部署</li><li>更改github仓库/.git/config文件<pre><code>[core]  repositoryformatversion = 0  filemode = false  bare = false  logallrefupdates = true  symlinks = false  ignorecase = true[remote &quot;origin&quot;]  url = git@github.com:xjdlb/xjdlb.github.io.git  fetch = +refs/heads/*:refs/remotes/origin/*[branch &quot;master&quot;]  remote = origin  merge = refs/heads/master</code></pre></li><li>更改url为gitee仓库的url</li><li>更改github仓库/-config.yml文件<pre><code>deploy:type: gitrepo:      gitee: git@gitee.com:bin_lee/bin_lee.gitbranch: master</code></pre></li><li>更改repo为gitee仓库的url</li><li>然后使用下面的脚本提交、推送、发布到gitee仓库，迁移就成功了<pre><code class="bash">echo &quot;hello&quot;yy=$(date +%y)mm=$(date +%m)dd=$(date +%d)HH=$(date +%H)MM=$(date +%M)SS=$(date +%S)xW=$(date +%U)we=$(date +%a)xD=$(date +%j)git statusgit add .git commit -m &quot;$yy/$mm/$dd-$HH:$MM:$SS 把github服务器上的pages迁移到gitee上&quot;echo &quot;==================================&quot;git push git@gitee.com:bin_lee/bin_lee.git hexogit  log --oneline | headecho &quot;==================================&quot;hexo clean &amp;&amp; hexo g -d</code></pre></li></ul><h2 id="迁移完成，实现多服务器部署"><a href="#迁移完成，实现多服务器部署" class="headerlink" title="迁移完成，实现多服务器部署"></a>迁移完成，实现多服务器部署</h2><ul><li>更改github仓库/.git/config文件，改为主要的服务器地址<pre><code>[core]  repositoryformatversion = 0  filemode = false  bare = false  logallrefupdates = true  symlinks = false  ignorecase = true[remote &quot;origin&quot;]  url = git@github.com:xjdlb/xjdlb.github.io.git  fetch = +refs/heads/*:refs/remotes/origin/*[branch &quot;master&quot;]  remote = origin  merge = refs/heads/master</code></pre></li><li>更改url为gitee仓库的url</li><li>更改github仓库/-config.yml文件<pre><code>deploy:type: gitrepo:      github: git@github.com:xjdlb/xjdlb.github.io.git      gitee: git@gitee.com:bin_lee/bin_lee.gitbranch: master</code></pre></li><li>更改repo为gitee仓库的url</li><li>然后使用下面的脚本提交、推送、发布到gitee仓库和github仓库，多服务器部署就成功了<pre><code class="bash">echo &quot;hello&quot;yy=$(date +%y)mm=$(date +%m)dd=$(date +%d)HH=$(date +%H)MM=$(date +%M)SS=$(date +%S)xW=$(date +%U)we=$(date +%a)xD=$(date +%j)git statusgit add .git commit -m &quot;$yy/$mm/$dd-$HH:$MM:$SS 同时部署到两个服务器上测试&quot;git push git@github.com:xjdlb/xjdlb.github.io.git hexogit  log --oneline | headecho &quot;==================================&quot;git push git@gitee.com:bin_lee/bin_lee.git hexogit  log --oneline | headecho &quot;==================================&quot;hexo clean &amp;&amp; hexo g -d</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何将github上的项目迁移到gitee上，如何实现源文件多服务器的部署。&lt;br&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>如何将hexo源文件整合到部署的git中？</title>
    <link href="http://yoursite.com/2018/03/28/%E5%A6%82%E4%BD%95%E5%B0%86hexo%E6%BA%90%E6%96%87%E4%BB%B6%E6%95%B4%E5%90%88%E5%88%B0%E9%83%A8%E7%BD%B2%E7%9A%84git%E4%B8%AD%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/03/28/如何将hexo源文件整合到部署的git中？/</id>
    <published>2018-03-28T06:46:11.000Z</published>
    <updated>2018-04-03T15:44:40.097Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何将hexo源文件整合到部署的git中，实现不携带源文件也能写博客，其中，发布和部署实现了自动化脚本操作。</p><a id="more"></a><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul><li>已经使用了hexo部署了自己的blog</li><li>源文件没有丢失</li></ul><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><ul><li>在github上克隆部署后的文件到本地客户端</li><li>使用git bash here进入git仓库</li><li>新建hexo分支并转换到hexo分支<pre><code class="bash">git checkout -b hexo</code></pre></li></ul><h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><ul><li>git仓库转换到hexo分支</li><li>将源文件blog文件夹下的所有文件拷贝到上述git仓库中</li></ul><h2 id="创建自动化脚本"><a href="#创建自动化脚本" class="headerlink" title="创建自动化脚本"></a>创建自动化脚本</h2><ul><li>在git仓库的根目录下创建脚本</li><li>脚本1 create_new_page.sh<pre><code class="bash">echo &quot;hello&quot;yy=$(date +%Y)mm=$(date +%m)dd=$(date +%d)HH=$(date +%H)MM=$(date +%M)SS=$(date +%S)filename=&quot;11111&quot;filepostfix=&quot;.md&quot;cd source/_poststouch $filename$filepostfixecho &gt; $filename$filepostfixecho &quot;---&quot; &gt;&gt; $filename$filepostfixecho &quot;title: $filename&quot; &gt;&gt; $filename$filepostfixecho &quot;date: $yy-$mm-$dd $HH:$MM:$SS&quot; &gt;&gt; $filename$filepostfixecho &quot;tags: [列表,2222,3333,4444]&quot; &gt;&gt; $filename$filepostfixecho &quot;categories: 5555&quot; &gt;&gt; $filename$filepostfixecho &quot;toc: true&quot; &gt;&gt; $filename$filepostfixecho &quot;mathjax: true&quot; &gt;&gt; $filename$filepostfixecho &quot;---&quot; &gt;&gt; $filename$filepostfixecho &quot;&quot; &gt;&gt; $filename$filepostfixecho &quot;&lt;!-- more --&gt;&quot; &gt;&gt; $filename$filepostfixcd ../..</code></pre></li><li>文本1 commit.txt<pre><code class="bash">echo &quot;hello&quot;yy=$(date +%y)mm=$(date +%m)dd=$(date +%d)HH=$(date +%H)MM=$(date +%M)SS=$(date +%S)xW=$(date +%U)we=$(date +%a)xD=$(date +%j)git statusgit add .git commit -m &quot;$yy/$mm/$dd-$HH:$MM:$SS 新增了列表标签&quot;git push origin hexogit  log --oneline | headecho &quot;==================================&quot;hexo clean &amp;&amp; hexo g -d</code></pre></li><li>脚本2 upload_and_deploy.sh<pre><code class="bash">ehco &quot;push and deploy...&quot;sh commit.txt</code></pre></li><li>本次修改完成直接在commit.txt中修改commit，然后运行upload_and_deploy.sh，即可上传代码到hexo分支，发布blog到master分支</li></ul><h2 id="换个地点继续写作"><a href="#换个地点继续写作" class="headerlink" title="换个地点继续写作"></a>换个地点继续写作</h2><ul><li>先决条件：电脑+网络+nodejs+hexo</li><li>克隆仓库到本地</li><li>在仓库中建立hexo配置脚本 init_hexo_after_clone.sh<pre><code>git checkout hexonpm install hexonpm installnpm install hexo-deployer-git</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何将hexo源文件整合到部署的git中，实现不携带源文件也能写博客，其中，发布和部署实现了自动化脚本操作。&lt;/p&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo部署在github和gitee上的坑</title>
    <link href="http://yoursite.com/2018/03/28/hexo%E9%83%A8%E7%BD%B2%E5%9C%A8github%E5%92%8Cgitee%E4%B8%8A%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2018/03/28/hexo部署在github和gitee上的坑/</id>
    <published>2018-03-28T02:00:53.000Z</published>
    <updated>2018-03-28T06:40:12.342Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了hexo博客github和gitee上部署时候遇到的坑。<br><a id="more"></a></p><h2 id="遇到的坑列举如下"><a href="#遇到的坑列举如下" class="headerlink" title="遇到的坑列举如下"></a>遇到的坑列举如下</h2><ul><li>gitee不支持个性化的域名绑定，所以不要试图申请阿里云的域名，将域名指向gitee pages。</li><li>github pages支持个性化域名的绑定，需要在blog/source目录下新建CNAME文件，并写入自己域名。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了hexo博客github和gitee上部署时候遇到的坑。&lt;br&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="gitee" scheme="http://yoursite.com/tags/gitee/"/>
    
      <category term="部署" scheme="http://yoursite.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>hexo的主题相关的配置</title>
    <link href="http://yoursite.com/2018/03/27/hexo%E7%9A%84%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/03/27/hexo的主题相关配置/</id>
    <published>2018-03-27T05:00:00.000Z</published>
    <updated>2018-03-28T06:40:24.822Z</updated>
    
    <content type="html"><![CDATA[<p>本文将逐渐介绍blog和themes相关的配置方法.<br><a id="more"></a></p><h2 id="导航上的首页、标签、分类、关于等配置"><a href="#导航上的首页、标签、分类、关于等配置" class="headerlink" title="导航上的首页、标签、分类、关于等配置"></a>导航上的首页、标签、分类、关于等配置</h2><ul><li>保留blog下的配置文件中的首页、标签、分类、关于的目录正确</li><li>在theme下配置文件打开menu相关的导航</li><li>博文前面文件为：<pre><code>title: 使用github pages和hexo搭建自己的博客date: 2018-03-27 13:56:08tags: [githubpages,hexo,配置]categories: 配置toc: truemathjax: true</code></pre></li><li>或者<pre><code>title: 如何利用ubuntu云服务器实现私有git服务端-附ssh常见操作？date: 2018-03-27 18:37:32tags:  - git  - 配置categories: 配置toc: truemathjax: true</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将逐渐介绍blog和themes相关的配置方法.&lt;br&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="githubpages" scheme="http://yoursite.com/tags/githubpages/"/>
    
  </entry>
  
  <entry>
    <title>使用github pages和hexo搭建自己的博客</title>
    <link href="http://yoursite.com/2018/03/27/%E4%BD%BF%E7%94%A8github%20pages%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/03/27/使用github pages和hexo搭建自己的博客/</id>
    <published>2018-03-27T04:00:00.000Z</published>
    <updated>2018-03-28T06:39:50.911Z</updated>
    
    <content type="html"><![CDATA[<p>本文描述了如何使用github pages和hexo搭建自己的博客。<br><a id="more"></a></p><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js下载地址</a></li><li>下载node.js，并安装</li></ul><h2 id="安装git并配置ssh密钥"><a href="#安装git并配置ssh密钥" class="headerlink" title="安装git并配置ssh密钥"></a>安装git并配置ssh密钥</h2><ul><li>在客户端下载<a href="https://git-scm.com/downloads/" target="_blank" rel="noopener">git下载地址</a></li><li>安装git</li><li>在客户端右键打开git bash here</li><li>设置user.name和user.email<pre><code>git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;</code></pre></li><li>生成ssh密钥<pre><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code></pre></li><li>显示密钥<pre><code>cat ~/.ssh/id_rsa.pub</code></pre></li><li>添加密钥到github服务器中密钥管理<a href="https://github.com/settings/keys" target="_blank" rel="noopener">添加地址</a></li></ul><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ul><li>安装hexo、安装扩展插件<pre><code># 安装hexonpm install hexo-cli g# 初始化博客文件夹hexo init blog# 切换到该路径cd blog# 安装hexo的扩展插件npm install# 安装其它插件npm install hexo-server --savenpm install hexo-admin --savenpm install hexo-generator-archive --savenpm install hexo-generator-feed --savenpm install hexo-generator-search --savenpm install hexo-generator-tag --savenpm install hexo-deployer-git --savenpm install hexo-generator-sitemap --save</code></pre></li></ul><h2 id="本地开发blog与本地测试"><a href="#本地开发blog与本地测试" class="headerlink" title="本地开发blog与本地测试"></a>本地开发blog与本地测试</h2><ul><li>添加自己的markdown到 blog/source/posts目录下</li><li>生成静态页面并开启服务器<pre><code># 生成静态页面hexo generate# 开启本地服务器hexo s# 或者hexo s -p 指定的port</code></pre></li><li>打开浏览器，地址栏中输入：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></li></ul><h2 id="服务端新建自己的博客仓库"><a href="#服务端新建自己的博客仓库" class="headerlink" title="服务端新建自己的博客仓库"></a>服务端新建自己的博客仓库</h2><ul><li>在 <a href="https://github.com/new" target="_blank" rel="noopener">https://github.com/new</a> 中新建自己的仓库</li><li>其中Repository name要和Owner是一致的</li></ul><h2 id="客户端将hexo博客部署到github上"><a href="#客户端将hexo博客部署到github上" class="headerlink" title="客户端将hexo博客部署到github上"></a>客户端将hexo博客部署到github上</h2><ul><li>修改配置文件blog/config.yml，修改deploy项的内容<pre><code># Deployment 注释## Docs: https://hexo.io/docs/deployment.htmldeploy:# 类型type: git# 仓库repo: git@github.com:xjdlb/xjdlb.github.io.git# 分支branch: master</code></pre></li><li>注意：type: git中的冒号后面由空格</li><li>注意：将xjdlb换成自己的用户名</li></ul><h2 id="客户端将自己的blog部署hexo"><a href="#客户端将自己的blog部署hexo" class="headerlink" title="客户端将自己的blog部署hexo"></a>客户端将自己的blog部署hexo</h2><ul><li>将自己的项目部署到github pages中<pre><code># 清空静态页面hexo clean# 生成静态页面hexo generate# 部署hexo deploy</code></pre></li><li>打开网页，输入 <a href="http://github_username.github.io" target="_blank" rel="noopener">http://github_username.github.io</a> 打开github上托管的博客</li><li>如我的博客地址是：<a href="http://xjdlb.github.io" target="_blank" rel="noopener">http://xjdlb.github.io</a></li></ul><h2 id="hexo命令缩写与组合"><a href="#hexo命令缩写与组合" class="headerlink" title="hexo命令缩写与组合"></a>hexo命令缩写与组合</h2><ul><li>含义<pre><code>hexo g：hexo generatehexo c：hexo cleanhexo s：hexo serverhexo d：hexo deploy</code></pre></li><li>组合<pre><code># 清除、生成、启动hexo clean &amp;&amp; hexo g -s# 清除、生成、部署hexo clean &amp;&amp; hexo g -d</code></pre></li></ul><h2 id="主题相关配置"><a href="#主题相关配置" class="headerlink" title="主题相关配置"></a>主题相关配置</h2><ul><li>在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo themes</a>中下载相关的主题</li><li>下载方法在blog目录中克隆<pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre></li><li>在blog/config.yml中配置主题<pre><code>theme: next</code></pre></li></ul><h2 id="新建blog文件"><a href="#新建blog文件" class="headerlink" title="新建blog文件"></a>新建blog文件</h2><ul><li>hexo new “Hexo教程”</li><li>添加标题及其分类信息<pre><code>title: Hello Worlddate: 2016-01-15 20:19:32tags: [SayHi]categories: SayHitoc: truemathjax: true</code></pre></li><li>或者 在blog目录下可以写成脚本<pre><code>yy=$(date +%Y)mm=$(date +%m)dd=$(date +%d)HH=$(date +%H)MM=$(date +%M)SS=$(date +%S)filename=&quot;11111&quot;filepostfix=&quot;.md&quot;cd source/_poststouch $filename$filepostfixecho &gt; $filename$filepostfixecho &quot;---&quot; &gt;&gt; $filename$filepostfixecho &quot;title: $filename&quot; &gt;&gt; $filename$filepostfixecho &quot;date: $yy-$mm-$dd $HH:$MM:$SS&quot; &gt;&gt; $filename$filepostfixecho &quot;tags: [2222,3333,4444]&quot; &gt;&gt; $filename$filepostfixecho &quot;categories: 5555&quot; &gt;&gt; $filename$filepostfixecho &quot;toc: true&quot; &gt;&gt; $filename$filepostfixecho &quot;mathjax: true&quot; &gt;&gt; $filename$filepostfixecho &quot;---&quot; &gt;&gt; $filename$filepostfixcd ../..</code></pre></li></ul><h2 id="将github-pages绑定自己的域名"><a href="#将github-pages绑定自己的域名" class="headerlink" title="将github pages绑定自己的域名"></a>将github pages绑定自己的域名</h2><ul><li>在阿里云控制台找到域名管理</li><li>在阿里云上购买自己的域名<a href="https://help.aliyun.com/product/35473.html" target="_blank" rel="noopener">注册地址</a></li><li>在xjdlb/xjdlb.github.io/settings中Custom domain处添加自己的域名，不要http://和www</li><li>ping <a href="https://xjdlb.github.io/" target="_blank" rel="noopener">https://xjdlb.github.io/</a> 查看github pages的ip</li><li>添加解析</li></ul><table><thead><tr><th>记录类型</th><th>主机记录</th><th>解析线路</th><th>记录值</th><th>TTL值</th></tr></thead><tbody><tr><td>A</td><td>@</td><td>默认</td><td>151.101.41.147</td><td>600</td></tr><tr><td>A</td><td>www</td><td>默认</td><td>151.101.41.147</td><td>600</td></tr></tbody></table><ul><li>使用自己的域名测试</li></ul><h2 id="CNAME问题"><a href="#CNAME问题" class="headerlink" title="CNAME问题"></a>CNAME问题</h2><p>问题：每次hexo deploy之后，<a href="https://www.leebin.top" target="_blank" rel="noopener">https://www.leebin.top</a> 都会出现404错误<br>一般解决：Github pages–&gt;Settings–&gt;Custom domain<br>最优解决：在将CNAME文件放在source目录下，CNAME文件内容为：leebin.top</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文描述了如何使用github pages和hexo搭建自己的博客。&lt;br&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="pages" scheme="http://yoursite.com/tags/pages/"/>
    
  </entry>
  
  <entry>
    <title>如何利用ubuntu实现私有git服务端-附ssh操作？</title>
    <link href="http://yoursite.com/2018/03/27/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8ubuntu%E5%AE%9E%E7%8E%B0%E7%A7%81%E6%9C%89git%E6%9C%8D%E5%8A%A1%E7%AB%AF-%E9%99%84ssh%E6%93%8D%E4%BD%9C%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/03/27/如何利用ubuntu实现私有git服务端-附ssh操作？/</id>
    <published>2018-03-27T03:00:00.000Z</published>
    <updated>2018-04-03T23:04:47.779Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何利用云服务器实现私有git服务端，包含了git新建仓库、本地与服务器的ssh互连、保留gitlog迁移git的方法、以及创建仓库的自动化脚本。<br><a id="more"></a></p><h2 id="在服务端下载git"><a href="#在服务端下载git" class="headerlink" title="在服务端下载git"></a>在服务端下载git</h2><ul><li>下载安装git<pre><code>apt-get updateapt-get install git -y</code></pre></li></ul><h2 id="配置git用户"><a href="#配置git用户" class="headerlink" title="配置git用户"></a>配置git用户</h2><ul><li>添加git用户<pre><code>useradd gitpasswd git</code></pre></li></ul><h2 id="通过ssh客户端和服务器互连"><a href="#通过ssh客户端和服务器互连" class="headerlink" title="通过ssh客户端和服务器互连"></a>通过ssh客户端和服务器互连</h2><ul><li>客户端生成ssh密钥<pre><code class="bash">git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;cat ~/.ssh/id_rsa.pub</code></pre></li><li>或者 上述操作可以集成为无交互的脚本在本地直接执行即可<pre><code class="bash">y=$(date +%y)m=$(date +%m)d=$(date +%d)H=$(date +%H)M=$(date +%M)S=$(date +%S)path=$(pwd)cd ~git config --global user.name &quot;bin_lee&quot;git config --global user.email &quot;xjd.binlee@qq.com&quot;#cd ~/.sshtar -zcvf ssh_binlee_backup_$y-$m-$d-$H-$M-$S.tar.gz .sshrm -rfd ~/.ssh# ssh-keygen -t rsa -C &quot;xjd.binlee@qq.com&quot;ssh-keygen -t rsa -P &quot;&quot; -C &quot;xjd.binlee@qq.com&quot; -f ~/.ssh/id_rsacat ~/.ssh/id_rsa.pubcd $path</code></pre></li><li><p>服务端安装ssh并实现xshell连接</p><pre><code class="bash">#安装sudo apt-get install openssh-server -ysudo ps -e |grep sshsudo service ssh startsudo passwd rootsudo vi /etc/ssh/sshd_configPermitRootLogin prohibit-passwordPermitRootLogin yessudo service ssh restart#在服务器的指定用户目录下mkdir -p /root/.sshtouch authorized_keys</code></pre></li><li><p>将上述生成的密钥文件添加到服务端</p><pre><code class="bash">echo &quot;密钥&quot; &gt;&gt; /root/.ssh/authorized_keys</code></pre></li><li>客户端测试连通性<pre><code class="bash">ssh -T git@gitee.com或者ssh -T git@server_ip</code></pre></li></ul><h2 id="新建git仓库并使用"><a href="#新建git仓库并使用" class="headerlink" title="新建git仓库并使用"></a>新建git仓库并使用</h2><ul><li>新建git仓库<pre><code>mkdir -p /srv/git/repos/xxx.gitcd /srv/git/repos</code></pre></li><li>初始化git仓库<pre><code>git init --bare /srv/git/repos/xxx.git</code></pre></li><li>设置git仓库的访问权限<pre><code class="bash">cd /srv/git/reposchmod -R 775 xxx.gitchown -R git xxx.gitchgrp -R git xxx.git</code></pre></li><li>克隆git仓库并测试<pre><code class="bash">git clone git@server_ip:/srv/git/repos/xxx.git</code></pre><h2 id="大招-将上述操作合并为git脚本"><a href="#大招-将上述操作合并为git脚本" class="headerlink" title="大招 将上述操作合并为git脚本"></a>大招 将上述操作合并为git脚本</h2></li><li>合并如下：<pre><code class="bash">apt-get updateecho &quot;----------------------------------------&quot;echo &quot;&gt;&gt;&gt; update finished...&quot;echo &quot;----------------------------------------&quot;apt-get install git -yecho &quot;----------------------------------------&quot;echo &quot;&gt;&gt;&gt; install finished...&quot;echo &quot;----------------------------------------&quot;#useradd git#passwd git#or#openssl passwd -stdinuseradd -p &quot;8iENHwQTXrdZM&quot; git#change passwdtouch chpass.txtecho &quot;git:hest&quot; &gt;&gt; chpass.txtchpasswd &lt; chpass.txtrm -rf chpass.txtecho &quot;----------------------------------------&quot;echo &quot;&gt;&gt;&gt; useradd and reset passwd finished...&quot;echo &quot;----------------------------------------&quot;key=&quot;ssh-rsa AAA.......&quot;mkdir -p /home/git/.sshtouch /home/git/.ssh/authorized_keys#vim /home/git/.ssh/authorized_keysecho &quot;${key}&quot; &gt;&gt; /home/git/.ssh/authorized_keyscat /home/git/.ssh/authorized_keysecho &quot;----------------------------------------&quot;echo &quot;&gt;&gt;&gt; add authorized_keys finished...&quot;echo &quot;----------------------------------------&quot;respos_path=&quot;/srv/git/respos/&quot;project_name=&quot;test.git&quot;project_path=${respos_path}${project_name}mkdir -p ${project_path}git init --bare ${project_path}chmod -R 775 ${project_path}chown -R git ${project_path}chgrp -R git ${project_path}echo &quot;----------------------------------------&quot;echo &quot;init git respos finished...&quot;my_ip=$(/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk &#39;{print $2}&#39;|tr -d &quot;addr:&quot;)echo &quot;git clone git@${my_ip}:${project_path}&quot;echo &quot;----------------------------------------&quot;</code></pre><h2 id="如果出错销毁服务端git"><a href="#如果出错销毁服务端git" class="headerlink" title="如果出错销毁服务端git"></a>如果出错销毁服务端git</h2></li><li>删除用户和仓库<pre><code>userdel -r gitrm -rdf /srv/git/</code></pre><h2 id="如果服务器出现问题，保留gitlog迁移git的方法"><a href="#如果服务器出现问题，保留gitlog迁移git的方法" class="headerlink" title="如果服务器出现问题，保留gitlog迁移git的方法"></a>如果服务器出现问题，保留gitlog迁移git的方法</h2></li><li>使用镜像克隆保留gitlog<pre><code class="bash">#在源服务器上裸克隆git clone --bare git://github.com/username/project.gitcd project.git#镜像上传到新的服务器上git push --mirror git@gitcafe.com/username/newproject.gitcd ..rm -rf project.git#克隆新服务器下的工程到客户端git clone git@gitcafe.com/username/newproject.git#设置新的上传url为新服务器的地址git remote set-url origin remote_git_address  </code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何利用云服务器实现私有git服务端，包含了git新建仓库、本地与服务器的ssh互连、保留gitlog迁移git的方法、以及创建仓库的自动化脚本。&lt;br&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>如何利用VPS搭建自己的ss服务器？</title>
    <link href="http://yoursite.com/2018/03/27/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84ss%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/03/27/如何利用VPS搭建自己的ss服务器？/</id>
    <published>2018-03-27T02:00:00.000Z</published>
    <updated>2018-04-03T15:39:57.339Z</updated>
    
    <content type="html"><![CDATA[<p>本文描述了如何在ubuntu服务器上快速搭建自己的shadowcoks代理服务器。<br><a id="more"></a></p><h2 id="以详细步骤安装配置启动过程"><a href="#以详细步骤安装配置启动过程" class="headerlink" title="以详细步骤安装配置启动过程"></a>以详细步骤安装配置启动过程</h2><h3 id="1-安装ss"><a href="#1-安装ss" class="headerlink" title="1.安装ss"></a>1.安装ss</h3><pre><code class="bash">apt-get updatesudo apt-get install python-pip -ysudo pip install shadowsocks</code></pre><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><pre><code class="bash">mkdir /etc/shadowsockstouch /etc/shadowsocks/ss_config.jsonvim /etc/shadowsocks/ss_config.json{  &quot;server&quot;: &quot;165.227.213.57&quot;,  &quot;port_password&quot;: {      &quot;10001&quot;: &quot;112345678a!&quot;,      &quot;10002&quot;: &quot;112345678a!&quot;,      &quot;10003&quot;: &quot;112345678a!&quot;  },  &quot;local_port&quot;: 1080,  &quot;timeout&quot;: 600,  &quot;method&quot;: &quot;aes-256-cfb&quot;}</code></pre><h3 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h3><pre><code class="bash">cd ~touch start.shchmod 775 start.shvim start.shssserver -c /etc/shadowsocks/ss_config.json -d startssserver -c /etc/shadowsocks/ss_config_multiple.json -d startnetstat -ntlp | grep pythontouch stop.shchmod 775 stop.shvim stop.shssserver -c /etc/shadowsocks/ss_config.json -d stopssserver -c /etc/shadowsocks/ss_config_multiple.json -d stopnetstat -ntlp | grep python</code></pre><h2 id="用脚本实现一键安装"><a href="#用脚本实现一键安装" class="headerlink" title="用脚本实现一键安装"></a>用脚本实现一键安装</h2><h3 id="1-创建配置启动脚本"><a href="#1-创建配置启动脚本" class="headerlink" title="1.创建配置启动脚本"></a>1.创建配置启动脚本</h3><pre><code class="bash">创建x脚本touch x &amp;&amp; chmod 775 x &amp;&amp; vim x直接复制到x脚本里面cd ~ &amp;&amp; touch ss_cfg.jsonip=&quot;162.243.161.150&quot;echo &quot;{&quot; &gt;&gt; ss_cfg.jsonecho &quot;\&quot;server\&quot;: \&quot;${ip}\&quot;,&quot; &gt;&gt; ss_cfg.jsonecho &quot;\&quot;port_password\&quot;: {&quot; &gt;&gt; ss_cfg.jsonecho &quot;\&quot;10001\&quot;: \&quot;helloworld\&quot;,&quot; &gt;&gt; ss_cfg.jsonecho &quot;\&quot;10002\&quot;: \&quot;helloworld\&quot;,&quot; &gt;&gt; ss_cfg.jsonecho &quot;\&quot;10003\&quot;: \&quot;helloworld\&quot;&quot; &gt;&gt; ss_cfg.jsonecho &quot;},&quot; &gt;&gt; ss_cfg.jsonecho &quot;\&quot;local_port\&quot;: 1080,&quot; &gt;&gt; ss_cfg.jsonecho &quot;\&quot;timeout\&quot;: 600,&quot; &gt;&gt; ss_cfg.jsonecho &quot;\&quot;method\&quot;: \&quot;aes-256-cfb\&quot;&quot; &gt;&gt; ss_cfg.jsonecho &quot;}&quot; &gt;&gt; ss_cfg.jsoncd ~touch sta.sh &amp;&amp; chmod 775 sta.shecho &quot;ssserver -c ~/ss_cfg.json -d start&quot; &gt;&gt; ~/sta.shecho &quot;netstat -ntlp | grep python&quot; &gt;&gt; ~/sta.shtouch sto.sh &amp;&amp; chmod 775 sto.shecho &quot;ssserver -c ~/ss_cfg.json -d stop&quot; &gt;&gt; ~/sto.shecho &quot;netstat -ntlp | grep python&quot; &gt;&gt; ~/sto.shecho &quot;-------------report-------------------&quot;echo &quot;the fie list as follows:&quot;lsecho &quot;-------------start ss-----------------&quot;./sta.shecho &quot;-------------your ss config-----------&quot;echo &quot;ip=${ip}&quot;echo &quot;port=10001, password=helloworld&quot;echo &quot;port=10002, password=helloworld&quot;echo &quot;port=10003, password=helloworld&quot;echo &quot;local_port=1080&quot;echo &quot;timeout=600&quot;echo &quot;method=aes-256-cfb&quot;echo &quot;-------------end---------------------&quot;</code></pre><h3 id="2-启动服务"><a href="#2-启动服务" class="headerlink" title="2.启动服务"></a>2.启动服务</h3><pre><code class="bash">运行x脚本./x启动服务./sta.sh关闭服务./sto.sh删除文件rm -rf x ss_cfg.json sta.sh sto.sh &amp;&amp; touch x &amp;&amp; chmod 775 x &amp;&amp; vim x</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文描述了如何在ubuntu服务器上快速搭建自己的shadowcoks代理服务器。&lt;br&gt;
    
    </summary>
    
      <category term="配置" scheme="http://yoursite.com/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="配置" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="ss" scheme="http://yoursite.com/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/27/hello-world/"/>
    <id>http://yoursite.com/2018/03/27/hello-world/</id>
    <published>2018-03-27T01:00:00.000Z</published>
    <updated>2018-03-28T06:40:02.023Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="SayHi" scheme="http://yoursite.com/categories/SayHi/"/>
    
    
      <category term="列表" scheme="http://yoursite.com/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="SayHi" scheme="http://yoursite.com/tags/SayHi/"/>
    
  </entry>
  
</feed>
